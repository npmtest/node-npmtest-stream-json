{"/home/travis/build/npmtest/node-npmtest-stream-json/test.js":"/* istanbul instrument in package npmtest_stream_json */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-stream-json/lib.npmtest_stream_json.js":"/* istanbul instrument in package npmtest_stream_json */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_stream_json = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_stream_json = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-stream-json/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-stream-json && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_stream_json */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_stream_json\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_stream_json.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_stream_json.rollup.js'] =\n            local.assetsDict['/assets.npmtest_stream_json.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_stream_json.__dirname + '/lib.npmtest_stream_json.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-stream-json/node_modules/stream-json/main.js":"\"use strict\";\n\n\nvar Combo  = require(\"./Combo\");\nvar Source = require(\"./Source\");\n\n\nfunction makeSource(options){\n\tif(!options || !(\"packKeys\" in options || \"packStrings\" in options || \"packNumbers\" in options)){\n\t\toptions = options ? Object.create(options) : {};\n\t\toptions.packKeys = options.packStrings = options.packNumbers = true;\n\t}\n\treturn new Source([new Combo(options)]);\n}\n\n\nmodule.exports = makeSource;\n","/home/travis/build/npmtest/node-npmtest-stream-json/node_modules/stream-json/Combo.js":"\"use strict\";\n\n\nvar util = require(\"util\");\nvar Transform = require(\"stream\").Transform;\n\n\nfunction Parser(options){\n\tTransform.call(this, options);\n\tthis._writableState.objectMode = false;\n\tthis._readableState.objectMode = true;\n\n\tif(options){\n\t\tthis._packKeys    = options.packKeys;\n\t\tthis._packStrings = options.packStrings;\n\t\tthis._packNumbers = options.packNumbers;\n\t}\n\n\tthis._buffer = \"\";\n\tthis._done   = false;\n\tthis._expect = \"value\";\n\tthis._stack  = [];\n\tthis._parent = \"\";\n\tthis._open_number = false;\n\tthis._accumulator = \"\";\n}\nutil.inherits(Parser, Transform);\n\nParser.prototype._transform = function transform(chunk, encoding, callback){\n\tthis._buffer += chunk.toString();\n\tthis._processInput(callback);\n};\n\nParser.prototype._flush = function flush(callback){\n\tthis._done = true;\n\tthis._processInput(function(err){\n\t\tif(err){\n\t\t\tcallback(err);\n\t\t}else{\n\t\t\tif(this._open_number){\n\t\t\t\tthis.push({name: \"endNumber\"});\n\t\t\t\tthis._open_number = false;\n\t\t\t\tif(this._packNumbers){\n\t\t\t\t\tthis.push({name: \"numberValue\", value: this._accumulator});\n\t\t\t\t\tthis._accumulator = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tcallback();\n\t\t}\n\t}.bind(this));\n};\n\nvar value1  = /^(?:[\\\"\\{\\[\\]\\-\\d]|true\\b|false\\b|null\\b|\\s{1,256})/,\n\tstring  = /^(?:[^\\\"\\\\]{1,256}|\\\\[bfnrt\\\"\\\\\\/]|\\\\u[\\da-fA-F]{4}|\\\")/,\n\tkey1    = /^(?:[\\\"\\}]|\\s{1,256})/,\n\tcolon   = /^(?:\\:|\\s{1,256})/,\n\tcomma   = /^(?:[\\,\\]\\}]|\\s{1,256})/,\n\tws      = /^\\s{1,256}/,\n\tnumberStart     = /^\\d/,\n\tnumberDigit     = /^\\d{0,256}/,\n\tnumberFraction  = /^[\\.eE]/,\n\tnumberFracStart = numberStart,\n\tnumberFracDigit = numberDigit,\n\tnumberExponent  = /^[eE]/,\n\tnumberExpSign   = /^[-+]/,\n\tnumberExpStart  = numberStart,\n\tnumberExpDigit  = numberDigit;\n\nvar values   = {\"true\": true, \"false\": false, \"null\": null},\n\texpected = {object: \"objectStop\", array: \"arrayStop\", \"\": \"done\"};\n\n// long hexadecimal codes: \\uXXXX\nfunction fromHex(s){ return String.fromCharCode(parseInt(s.slice(2), 16)); }\n\n// short codes: \\b \\f \\n \\r \\t \\\" \\\\ \\/\nvar codes = {b: \"\\b\", f: \"\\f\", n: \"\\n\", r: \"\\r\", t: \"\\t\", '\"': '\"', \"\\\\\": \"\\\\\", \"/\": \"/\"};\n\nParser.prototype._processInput = function(callback){\n\tvar match, value;\n\tmain: for(;;){\n\t\tswitch(this._expect){\n\t\t\tcase \"value1\":\n\t\t\tcase \"value\":\n\t\t\t\tmatch = value1.exec(this._buffer);\n\t\t\t\tif(!match){\n\t\t\t\t\tif(this._buffer){\n\t\t\t\t\t\tif(this._done){\n\t\t\t\t\t\t\treturn callback(new Error(\"Parser cannot parse input: expected a value\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(this._done){\n\t\t\t\t\t\treturn callback(new Error(\"Parser has expected a value\"));\n\t\t\t\t\t}\n\t\t\t\t\t// wait for more input\n\t\t\t\t\tbreak main;\n\t\t\t\t}\n\t\t\t\tvalue = match[0];\n\t\t\t\tswitch(value){\n\t\t\t\t\tcase \"\\\"\":\n\t\t\t\t\t\tthis.push({name: \"startString\"});\n\t\t\t\t\t\tthis._expect = \"string\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"{\":\n\t\t\t\t\t\tthis.push({name: \"startObject\"});\n\t\t\t\t\t\tthis._stack.push(this._parent);\n\t\t\t\t\t\tthis._parent = \"object\";\n\t\t\t\t\t\tthis._expect = \"key1\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"[\":\n\t\t\t\t\t\tthis.push({name: \"startArray\"});\n\t\t\t\t\t\tthis._stack.push(this._parent);\n\t\t\t\t\t\tthis._parent = \"array\";\n\t\t\t\t\t\tthis._expect = \"value1\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"]\":\n\t\t\t\t\t\tif(this._expect !== \"value1\"){\n\t\t\t\t\t\t\treturn callback(new Error(\"Parser cannot parse input: unexpected token ']'\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(this._open_number){\n\t\t\t\t\t\t\tthis.push({name: \"endNumber\"});\n\t\t\t\t\t\t\tthis._open_number = false;\n\t\t\t\t\t\t\tif(this._packNumbers){\n\t\t\t\t\t\t\t\tthis.push({name: \"numberValue\", value: this._accumulator});\n\t\t\t\t\t\t\t\tthis._accumulator = \"\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.push({name: \"endArray\"});\n\t\t\t\t\t\tthis._parent = this._stack.pop();\n\t\t\t\t\t\tthis._expect = expected[this._parent];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"-\":\n\t\t\t\t\t\tthis._open_number = true;\n\t\t\t\t\t\tthis.push({name: \"startNumber\"});\n\t\t\t\t\t\tthis.push({name: \"numberChunk\", value: \"-\"});\n\t\t\t\t\t\tif(this._packNumbers){\n\t\t\t\t\t\t\tthis._accumulator = \"-\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._expect = \"numberStart\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"0\":\n\t\t\t\t\t\tthis._open_number = true;\n\t\t\t\t\t\tthis.push({name: \"startNumber\"});\n\t\t\t\t\t\tthis.push({name: \"numberChunk\", value: \"0\"});\n\t\t\t\t\t\tif(this._packNumbers){\n\t\t\t\t\t\t\tthis._accumulator = \"0\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._expect = \"numberFraction\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"1\":\n\t\t\t\t\tcase \"2\":\n\t\t\t\t\tcase \"3\":\n\t\t\t\t\tcase \"4\":\n\t\t\t\t\tcase \"5\":\n\t\t\t\t\tcase \"6\":\n\t\t\t\t\tcase \"7\":\n\t\t\t\t\tcase \"8\":\n\t\t\t\t\tcase \"9\":\n\t\t\t\t\t\tthis._open_number = true;\n\t\t\t\t\t\tthis.push({name: \"startNumber\"});\n\t\t\t\t\t\tthis.push({name: \"numberChunk\", value: value});\n\t\t\t\t\t\tif(this._packNumbers){\n\t\t\t\t\t\t\tthis._accumulator = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._expect = \"numberDigit\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"true\":\n\t\t\t\t\tcase \"false\":\n\t\t\t\t\tcase \"null\":\n\t\t\t\t\t\tif(this._buffer.length === value.length && !this._done){\n\t\t\t\t\t\t\t// wait for more input\n\t\t\t\t\t\t\tbreak main;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.push({name: value + \"Value\", value: values[value]});\n\t\t\t\t\t\tthis._expect = expected[this._parent];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t// default: // ws\n\t\t\t\t}\n\t\t\t\tthis._buffer = this._buffer.substring(value.length);\n\t\t\t\tbreak;\n\t\t\tcase \"keyVal\":\n\t\t\tcase \"string\":\n\t\t\t\tmatch = string.exec(this._buffer);\n\t\t\t\tif(!match){\n\t\t\t\t\tif(this._buffer){\n\t\t\t\t\t\tif(this._done || this._buffer.length >= 6){\n\t\t\t\t\t\t\treturn callback(new Error(\"Parser cannot parse input: escaped characters\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(this._done){\n\t\t\t\t\t\treturn callback(new Error(\"Parser has expected a string value\"));\n\t\t\t\t\t}\n\t\t\t\t\t// wait for more input\n\t\t\t\t\tbreak main;\n\t\t\t\t}\n\t\t\t\tvalue = match[0];\n\t\t\t\tif(value === \"\\\"\"){\n\t\t\t\t\tif(this._expect === \"keyVal\"){\n\t\t\t\t\t\tthis.push({name: \"endKey\"});\n\t\t\t\t\t\tif(this._packKeys){\n\t\t\t\t\t\t\tthis.push({name: \"keyValue\", value: this._accumulator});\n\t\t\t\t\t\t\tthis._accumulator = \"\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._expect = \"colon\";\n\t\t\t\t\t}else{\n\t\t\t\t\t\tthis.push({name: \"endString\"});\n\t\t\t\t\t\tif(this._packStrings){\n\t\t\t\t\t\t\tthis.push({name: \"stringValue\", value: this._accumulator});\n\t\t\t\t\t\t\tthis._accumulator = \"\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._expect = expected[this._parent];\n\t\t\t\t\t}\n\t\t\t\t}else if(value.length > 1 && value.charAt(0) === \"\\\\\"){\n\t\t\t\t\tvar t = value.length == 2 ? codes[value.charAt(1)] : fromHex(value);\n\t\t\t\t\tthis.push({name: \"stringChunk\", value: t});\n\t\t\t\t\tif(this._expect === \"keyVal\" ? this._packKeys : this._packStrings){\n\t\t\t\t\t\tthis._accumulator += t;\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\tthis.push({name: \"stringChunk\", value: value});\n\t\t\t\t\tif(this._expect === \"keyVal\" ? this._packKeys : this._packStrings){\n\t\t\t\t\t\tthis._accumulator += value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._buffer = this._buffer.substring(value.length);\n\t\t\t\tbreak;\n\t\t\tcase \"key1\":\n\t\t\tcase \"key\":\n\t\t\t\tmatch = key1.exec(this._buffer);\n\t\t\t\tif(!match){\n\t\t\t\t\tif(this._buffer || this._done){\n\t\t\t\t\t\treturn callback(new Error(\"Parser cannot parse input: expected an object key\"));\n\t\t\t\t\t}\n\t\t\t\t\t// wait for more input\n\t\t\t\t\tbreak main;\n\t\t\t\t}\n\t\t\t\tvalue = match[0];\n\t\t\t\tif(value === \"\\\"\"){\n\t\t\t\t\tthis.push({name: \"startKey\"});\n\t\t\t\t\tthis._expect = \"keyVal\";\n\t\t\t\t}else if(value === \"}\"){\n\t\t\t\t\tif(this._expect !== \"key1\"){\n\t\t\t\t\t\treturn callback(new Error(\"Parser cannot parse input: unexpected token '}'\"));\n\t\t\t\t\t}\n\t\t\t\t\tthis.push({name: \"endObject\"});\n\t\t\t\t\tthis._parent = this._stack.pop();\n\t\t\t\t\tthis._expect = expected[this._parent];\n\t\t\t\t}\n\t\t\t\tthis._buffer = this._buffer.substring(value.length);\n\t\t\t\tbreak;\n\t\t\tcase \"colon\":\n\t\t\t\tmatch = colon.exec(this._buffer);\n\t\t\t\tif(!match){\n\t\t\t\t\tif(this._buffer || this._done){\n\t\t\t\t\t\treturn callback(new Error(\"Parser cannot parse input: expected ':'\"));\n\t\t\t\t\t}\n\t\t\t\t\t// wait for more input\n\t\t\t\t\tbreak main;\n\t\t\t\t}\n\t\t\t\tvalue = match[0];\n\t\t\t\tif(value === \":\"){\n\t\t\t\t\tthis._expect = \"value\";\n\t\t\t\t}\n\t\t\t\tthis._buffer = this._buffer.substring(value.length);\n\t\t\t\tbreak;\n\t\t\tcase \"arrayStop\":\n\t\t\tcase \"objectStop\":\n\t\t\t\tmatch = comma.exec(this._buffer);\n\t\t\t\tif(!match){\n\t\t\t\t\tif(this._buffer || this._done){\n\t\t\t\t\t\treturn callback(new Error(\"Parser cannot parse input: expected ','\"));\n\t\t\t\t\t}\n\t\t\t\t\t// wait for more input\n\t\t\t\t\tbreak main;\n\t\t\t\t}\n\t\t\t\tif(this._open_number){\n\t\t\t\t\tthis.push({name: \"endNumber\"});\n\t\t\t\t\tthis._open_number = false;\n\t\t\t\t\tif(this._packNumbers){\n\t\t\t\t\t\tthis.push({name: \"numberValue\", value: this._accumulator});\n\t\t\t\t\t\tthis._accumulator = \"\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvalue = match[0];\n\t\t\t\tif(value === \",\"){\n\t\t\t\t\tthis._expect = this._expect === \"arrayStop\" ? \"value\" : \"key\";\n\t\t\t\t}else if(value === \"}\" || value === \"]\"){\n\t\t\t\t\tthis.push({name: value === \"}\" ? \"endObject\" : \"endArray\"});\n\t\t\t\t\tthis._parent = this._stack.pop();\n\t\t\t\t\tthis._expect = expected[this._parent];\n\t\t\t\t}\n\t\t\t\tthis._buffer = this._buffer.substring(value.length);\n\t\t\t\tbreak;\n\t\t\t// number chunks\n\t\t\tcase \"numberStart\": // [0-9]\n\t\t\t\tmatch = numberStart.exec(this._buffer);\n\t\t\t\tif(!match){\n\t\t\t\t\tif(this._buffer || this._done){\n\t\t\t\t\t\treturn callback(new Error(\"Parser cannot parse input: expected a digit\"));\n\t\t\t\t\t}\n\t\t\t\t\t// wait for more input\n\t\t\t\t\tbreak main;\n\t\t\t\t}\n\t\t\t\tvalue = match[0];\n\t\t\t\tthis.push({name: \"numberChunk\", value: value});\n\t\t\t\tif(this._packNumbers){\n\t\t\t\t\tthis._accumulator += value;\n\t\t\t\t}\n\t\t\t\tthis._expect = value === \"0\" ? \"numberFraction\" : \"numberDigit\";\n\t\t\t\tthis._buffer = this._buffer.substring(value.length);\n\t\t\t\tbreak;\n\t\t\tcase \"numberDigit\": // [0-9]*\n\t\t\t\tmatch = numberDigit.exec(this._buffer);\n\t\t\t\tvalue = match[0];\n\t\t\t\tif(value){\n\t\t\t\t\tthis.push({name: \"numberChunk\", value: value});\n\t\t\t\t\tif(this._packNumbers){\n\t\t\t\t\t\tthis._accumulator += value;\n\t\t\t\t\t}\n\t\t\t\t\tthis._buffer = this._buffer.substring(value.length);\n\t\t\t\t}else{\n\t\t\t\t\tif(this._buffer){\n\t\t\t\t\t\tthis._expect = \"numberFraction\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif(this._done){\n\t\t\t\t\t\tthis._expect = expected[this._parent];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t// wait for more input\n\t\t\t\t\tbreak main;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"numberFraction\": // [\\.eE]?\n\t\t\t\tmatch = numberFraction.exec(this._buffer);\n\t\t\t\tif(!match){\n\t\t\t\t\tif(this._buffer || this._done){\n\t\t\t\t\t\tthis._expect = expected[this._parent];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t// wait for more input\n\t\t\t\t\tbreak main;\n\t\t\t\t}\n\t\t\t\tvalue = match[0];\n\t\t\t\tthis.push({name: \"numberChunk\", value: value});\n\t\t\t\tif(this._packNumbers){\n\t\t\t\t\tthis._accumulator += value;\n\t\t\t\t}\n\t\t\t\tthis._expect = value === \".\" ? \"numberFracStart\" : \"numberExpSign\";\n\t\t\t\tthis._buffer = this._buffer.substring(value.length);\n\t\t\t\tbreak;\n\t\t\tcase \"numberFracStart\": // [0-9]\n\t\t\t\tmatch = numberFracStart.exec(this._buffer);\n\t\t\t\tif(!match){\n\t\t\t\t\tif(this._buffer || this._done){\n\t\t\t\t\t\treturn callback(new Error(\"Parser cannot parse input: expected a fractional part of a number\"));\n\t\t\t\t\t}\n\t\t\t\t\t// wait for more input\n\t\t\t\t\tbreak main;\n\t\t\t\t}\n\t\t\t\tvalue = match[0];\n\t\t\t\tthis.push({name: \"numberChunk\", value: value});\n\t\t\t\tif(this._packNumbers){\n\t\t\t\t\tthis._accumulator += value;\n\t\t\t\t}\n\t\t\t\tthis._expect = \"numberFracDigit\";\n\t\t\t\tthis._buffer = this._buffer.substring(value.length);\n\t\t\t\tbreak;\n\t\t\tcase \"numberFracDigit\": // [0-9]*\n\t\t\t\tmatch = numberFracDigit.exec(this._buffer);\n\t\t\t\tvalue = match[0];\n\t\t\t\tif(value){\n\t\t\t\t\tthis.push({name: \"numberChunk\", value: value});\n\t\t\t\t\tif(this._packNumbers){\n\t\t\t\t\t\tthis._accumulator += value;\n\t\t\t\t\t}\n\t\t\t\t\tthis._buffer = this._buffer.substring(value.length);\n\t\t\t\t}else{\n\t\t\t\t\tif(this._buffer){\n\t\t\t\t\t\tthis._expect = \"numberExponent\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif(this._done){\n\t\t\t\t\t\tthis._expect = expected[this._parent];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t// wait for more input\n\t\t\t\t\tbreak main;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"numberExponent\": // [eE]?\n\t\t\t\tmatch = numberExponent.exec(this._buffer);\n\t\t\t\tif(!match){\n\t\t\t\t\tif(this._buffer){\n\t\t\t\t\t\tthis._expect = expected[this._parent];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif(this._done){\n\t\t\t\t\t\tthis._expect = \"done\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t// wait for more input\n\t\t\t\t\tbreak main;\n\t\t\t\t}\n\t\t\t\tvalue = match[0];\n\t\t\t\tthis.push({name: \"numberChunk\", value: value});\n\t\t\t\tif(this._packNumbers){\n\t\t\t\t\tthis._accumulator += value;\n\t\t\t\t}\n\t\t\t\tthis._expect = \"numberExpSign\";\n\t\t\t\tthis._buffer = this._buffer.substring(value.length);\n\t\t\t\tbreak;\n\t\t\tcase \"numberExpSign\": // [-+]?\n\t\t\t\tmatch = numberExpSign.exec(this._buffer);\n\t\t\t\tif(!match){\n\t\t\t\t\tif(this._buffer){\n\t\t\t\t\t\tthis._expect = \"numberExpStart\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif(this._done){\n\t\t\t\t\t\treturn callback(new Error(\"Parser has expected an exponent value of a number\"));\n\t\t\t\t\t}\n\t\t\t\t\t// wait for more input\n\t\t\t\t\tbreak main;\n\t\t\t\t}\n\t\t\t\tvalue = match[0];\n\t\t\t\tthis.push({name: \"numberChunk\", value: value});\n\t\t\t\tif(this._packNumbers){\n\t\t\t\t\tthis._accumulator += value;\n\t\t\t\t}\n\t\t\t\tthis._expect = \"numberExpStart\";\n\t\t\t\tthis._buffer = this._buffer.substring(value.length);\n\t\t\t\tbreak;\n\t\t\tcase \"numberExpStart\": // [0-9]\n\t\t\t\tmatch = numberExpStart.exec(this._buffer);\n\t\t\t\tif(!match){\n\t\t\t\t\tif(this._buffer || this._done){\n\t\t\t\t\t\treturn callback(new Error(\"Parser cannot parse input: expected an exponent part of a number\"));\n\t\t\t\t\t}\n\t\t\t\t\t// wait for more input\n\t\t\t\t\tbreak main;\n\t\t\t\t}\n\t\t\t\tvalue = match[0];\n\t\t\t\tthis.push({name: \"numberChunk\", value: value});\n\t\t\t\tif(this._packNumbers){\n\t\t\t\t\tthis._accumulator += value;\n\t\t\t\t}\n\t\t\t\tthis._expect = \"numberExpDigit\";\n\t\t\t\tthis._buffer = this._buffer.substring(value.length);\n\t\t\t\tbreak;\n\t\t\tcase \"numberExpDigit\": // [0-9]*\n\t\t\t\tmatch = numberExpDigit.exec(this._buffer);\n\t\t\t\tvalue = match[0];\n\t\t\t\tif(value){\n\t\t\t\t\tthis.push({name: \"numberChunk\", value: value});\n\t\t\t\t\tif(this._packNumbers){\n\t\t\t\t\t\tthis._accumulator += value;\n\t\t\t\t\t}\n\t\t\t\t\tthis._buffer = this._buffer.substring(value.length);\n\t\t\t\t}else{\n\t\t\t\t\tif(this._buffer || this._done){\n\t\t\t\t\t\tthis._expect = expected[this._parent];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t// wait for more input\n\t\t\t\t\tbreak main;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"done\":\n\t\t\t\tmatch = ws.exec(this._buffer);\n\t\t\t\tif(!match){\n\t\t\t\t\tif(this._buffer){\n\t\t\t\t\t\treturn callback(new Error(\"Parser cannot parse input: unexpected characters\"));\n\t\t\t\t\t}\n\t\t\t\t\t// wait for more input\n\t\t\t\t\tbreak main;\n\t\t\t\t}\n\t\t\t\tif(this._open_number){\n\t\t\t\t\tthis.push({name: \"endNumber\"});\n\t\t\t\t\tthis._open_number = false;\n\t\t\t\t\tif(this._packNumbers){\n\t\t\t\t\t\tthis.push({name: \"numberValue\", value: this._accumulator});\n\t\t\t\t\t\tthis._accumulator = \"\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._buffer = this._buffer.substring(match[0].length);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\tcallback();\n}\n\nmodule.exports = Parser;\n","/home/travis/build/npmtest/node-npmtest-stream-json/node_modules/stream-json/Source.js":"\"use strict\";\n\n\nvar util = require(\"util\");\nvar EventEmitter = require(\"events\").EventEmitter;\n\n\nfunction Source(streams){\n\tEventEmitter.call(this);\n\n\tif(!(streams instanceof Array) || !streams.length){\n\t\tthrow Error(\"Source's argument should be a non-empty array.\");\n\t}\n\n\tthis.streams = streams;\n\n\t// connect pipes\n\tvar input = this.input = streams[0], output = input;\n\tstreams.forEach(function(stream, index){\n\t\tif(index){\n\t\t\toutput = output.pipe(stream);\n\t\t}\n\t});\n\tthis.output = output;\n\n\t// connect events\n\tvar self = this;\n\toutput.on(\"data\", function(item){\n\t\tself.emit(item.name, item.value);\n\t});\n\toutput.on(\"end\", function(){\n\t\tself.emit(\"end\");\n\t});\n}\nutil.inherits(Source, EventEmitter);\n\n\nmodule.exports = Source;\n","/home/travis/build/npmtest/node-npmtest-stream-json/node_modules/stream-json/AltParser.js":"\"use strict\";\n\n\nvar util = require(\"util\");\nvar Transform = require(\"stream\").Transform;\n\n\nvar EXPECTING_NOTHING      = 0,\n\tEXPECTING_VALUE        = 1,\n\t// object\n\tEXPECTING_KEY_FIRST    = 2,\n\tEXPECTING_KEY          = 3,\n\tEXPECTING_KEY_COLON    = 4,\n\tEXPECTING_OBJECT_STOP  = 5,\n\t// array\n\tEXPECTING_ARRAY_FIRST  = 6,\n\tEXPECTING_ARRAY_STOP   = 7,\n\t// key\n\tEXPECTING_KEY_VALUE    = 8,\n\t// string\n\tEXPECTING_STRING_VALUE = 9,\n\t// numbers\n\tEXPECTING_NUMBER_START = 10,\n\tEXPECTING_NUMBER_DIGIT = 11,\n\tEXPECTING_FRACTION     = 12,\n\tEXPECTING_FRAC_START   = 13,\n\tEXPECTING_FRAC_DIGIT   = 14,\n\tEXPECTING_EXP_SIGN     = 15,\n\tEXPECTING_EXP_START    = 16,\n\tEXPECTING_EXP_DIGIT    = 17;\n\nvar PARSING_NOTHING = 0,\n\tPARSING_OBJECT  = 1,\n\tPARSING_ARRAY   = 2;\n\nvar LITERALS = {t: \"true\", f: \"false\", n: \"null\"},\n\tESCAPED_CHAR = \"e\", HEXADECIMALS = \"h\";\n\nvar hex = {\n\t\t\t\"0\": 1, \"1\": 1, \"2\": 1, \"3\": 1, \"4\": 1, \"5\": 1, \"6\": 1, \"7\": 1, \"8\": 1, \"9\": 1,\n\t\t\t\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"e\": 1, \"f\": 1,\n\t\t\t\"A\": 1, \"B\": 1, \"C\": 1, \"D\": 1, \"E\": 1, \"F\": 1\n\t\t};\n\n\nfunction Parser(options){\n\tTransform.call(this, options);\n\tthis._writableState.objectMode = false;\n\tthis._readableState.objectMode = true;\n\n\tthis._state  = EXPECTING_VALUE;\n\tthis._parent = PARSING_NOTHING;\n\tthis._stack  = [];\n\n\tthis._literal = null;\n\tthis._literalFrom = 0;\n\n\tthis._stash = \"\";\n\tthis._chunk = null;\n\n\tthis._line = this._pos = 1;\n\tthis._lastChar = \"\";\n}\nutil.inherits(Parser, Transform);\n\n\nParser.prototype._transform = function transform(chunk, encoding, callback){\n\tvar s = chunk.toString(), i = 0, j, k, n = s.length;\n\n\tmain: do{\n\t\tif(this._literal){\n\t\t\tswitch(this._literal){\n\t\t\t\tcase ESCAPED_CHAR:\n\t\t\t\t\tswitch(s[0]){\n\t\t\t\t\t\tcase \"\\\"\": case \"/\": case \"b\": case \"f\":\n\t\t\t\t\t\tcase \"\\\\\": case \"n\": case \"r\": case \"t\":\n\t\t\t\t\t\t\tthis.push({id: \"escapedChars\", value: \"\\\\\" + s[0], line: this._line, pos: this._pos});\n\t\t\t\t\t\t\t++i;\n\t\t\t\t\t\t\t++this._pos;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"u\":\n\t\t\t\t\t\t\tk = Math.min(5, n);\n\t\t\t\t\t\t\tfor(j = 1, ++i; i < k; ++j, ++i){\n\t\t\t\t\t\t\t\tif(!hex[s[i]]) {\n\t\t\t\t\t\t\t\t\treturn callback(new Error(\"While matching hexadecimals encountered '\" + s[i] + \"'\"));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tthis._stash += s[i];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(j < 5){\n\t\t\t\t\t\t\t\tthis._literal = HEXADECIMALS;\n\t\t\t\t\t\t\t\tthis._literalFrom = j;\n\t\t\t\t\t\t\t\tbreak main;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.push({id: \"escapedChars\", value: \"\\\\u\" + this._stash, line: this._line, pos: this._pos});\n\t\t\t\t\t\t\tthis._stash = \"\";\n\t\t\t\t\t\t\tthis._pos += 5;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn callback(new Error(\"Wrong escaped symbol '\" + c + \"'\"));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase HEXADECIMALS:\n\t\t\t\t\tk = Math.min(5 - this._literalFrom, n);\n\t\t\t\t\tfor(j = this._literalFrom; i < k; ++j, ++i){\n\t\t\t\t\t\tif(!hex[s[i]]) {\n\t\t\t\t\t\t\treturn callback(new Error(\"While matching hexadecimals encountered '\" + s[i] + \"'\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._stash += s[i];\n\t\t\t\t\t}\n\t\t\t\t\tif(j < 5){\n\t\t\t\t\t\tthis._literalFrom = j;\n\t\t\t\t\t\tbreak main;\n\t\t\t\t\t}\n\t\t\t\t\tthis.push({id: \"escapedChars\", value: \"\\\\u\" + this._stash, line: this._line, pos: this._pos});\n\t\t\t\t\tthis._stash = \"\";\n\t\t\t\t\tthis._pos += 5;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tk = Math.min(this._literal.length - this._literalFrom, n);\n\t\t\t\t\tfor(j = this._literalFrom; i < k; ++j, ++i){\n\t\t\t\t\t\tif(this._literal[j] !== s[i]) {\n\t\t\t\t\t\t\treturn callback(new Error(\"While matching '\" + this._literal + \"' encountered '\" + s[j] + \"' instead of '\" + LITERAL_TRUE[j - i] + \"'\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(j < this._literal.length){\n\t\t\t\t\t\tthis._literalFrom = j;\n\t\t\t\t\t\tbreak main;\n\t\t\t\t\t}\n\t\t\t\t\tthis.push({id: this._literal, value: this._literal, line: this._line, pos: this._pos});\n\t\t\t\t\tthis._pos += this._literal.length;\n\t\t\t\t\t// end of value\n\t\t\t\t\tswitch(this._parent){\n\t\t\t\t\t\tcase PARSING_OBJECT:\n\t\t\t\t\t\t\tthis._state = EXPECTING_OBJECT_STOP;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase PARSING_ARRAY:\n\t\t\t\t\t\t\tthis._state = EXPECTING_ARRAY_STOP;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tthis._state = EXPECTING_NOTHING;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis._literal = null;\n\t\t}\n\n\t\tfor(; i < n; ++i, ++this._pos){\n\t\t\tvar c = s[i];\n\t\t\t// calculate (line, pos)\n\t\t\tswitch(c){\n\t\t\t\tcase \"\\r\":\n\t\t\t\t\t++this._line;\n\t\t\t\t\tthis._pos = 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"\\n\":\n\t\t\t\t\tif(this._lastChar !== \"\\r\"){\n\t\t\t\t\t\t++this._line;\n\t\t\t\t\t}\n\t\t\t\t\tthis._pos = 1;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis._lastChar = c;\n\t\t\t// process a character\n\t\t\tswitch(this._state){\n\t\t\t\tcase EXPECTING_NOTHING:\n\t\t\t\t\tswitch(c){\n\t\t\t\t\t\tcase \" \": case \"\\t\": case \"\\r\": case \"\\n\": // ws\n\t\t\t\t\t\t\tif(this._chunk && this._chunk.id !== \"ws\"){\n\t\t\t\t\t\t\t\tthis._chunk.value = s.substring(this._chunk.value, i);\n\t\t\t\t\t\t\t\tthis.push(this._chunk);\n\t\t\t\t\t\t\t\tthis._chunk = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(!this._chunk){\n\t\t\t\t\t\t\t\tthis._chunk = {id: \"ws\", value: i, line: this._line, pos: this._pos};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn callback(new Error(\"Expected whitespace\"));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase EXPECTING_VALUE:\n\t\t\t\tcase EXPECTING_ARRAY_FIRST:\n\t\t\t\t\tswitch(c){\n\t\t\t\t\t\tcase \"{\": // object\n\t\t\t\t\t\t\tif(this._chunk){\n\t\t\t\t\t\t\t\tthis._chunk.value = s.substring(this._chunk.value, i);\n\t\t\t\t\t\t\t\tthis.push(this._chunk);\n\t\t\t\t\t\t\t\tthis._chunk = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.push({id: c, value: c, line: this._line, pos: this._pos});\n\t\t\t\t\t\t\tthis._state = EXPECTING_KEY_FIRST;\n\t\t\t\t\t\t\tthis._stack.push(this._parent);\n\t\t\t\t\t\t\tthis._parent = PARSING_OBJECT;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tcase \"[\": // array\n\t\t\t\t\t\t\tif(this._chunk){\n\t\t\t\t\t\t\t\tthis._chunk.value = s.substring(this._chunk.value, i);\n\t\t\t\t\t\t\t\tthis.push(this._chunk);\n\t\t\t\t\t\t\t\tthis._chunk = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.push({id: c, value: c, line: this._line, pos: this._pos});\n\t\t\t\t\t\t\tthis._state = EXPECTING_ARRAY_FIRST;\n\t\t\t\t\t\t\tthis._stack.push(this._parent);\n\t\t\t\t\t\t\tthis._parent = PARSING_ARRAY;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tcase \"\\\"\": // string\n\t\t\t\t\t\t\tif(this._chunk){\n\t\t\t\t\t\t\t\tthis._chunk.value = s.substring(this._chunk.value, i);\n\t\t\t\t\t\t\t\tthis.push(this._chunk);\n\t\t\t\t\t\t\t\tthis._chunk = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.push({id: c, value: c, line: this._line, pos: this._pos});\n\t\t\t\t\t\t\tthis._state = EXPECTING_STRING_VALUE;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tcase \"-\": // number\n\t\t\t\t\t\t\tif(this._chunk){\n\t\t\t\t\t\t\t\tthis._chunk.value = s.substring(this._chunk.value, i);\n\t\t\t\t\t\t\t\tthis.push(this._chunk);\n\t\t\t\t\t\t\t\tthis._chunk = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.push({id: c, value: c, line: this._line, pos: this._pos});\n\t\t\t\t\t\t\tthis._state = EXPECTING_NUMBER_START;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tcase \"0\": // number\n\t\t\t\t\t\t\tif(this._chunk){\n\t\t\t\t\t\t\t\tthis._chunk.value = s.substring(this._chunk.value, i);\n\t\t\t\t\t\t\t\tthis.push(this._chunk);\n\t\t\t\t\t\t\t\tthis._chunk = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.push({id: c, value: c, line: this._line, pos: this._pos});\n\t\t\t\t\t\t\tthis._state = EXPECTING_FRACTION;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tcase \"1\": case \"2\": case \"3\": case \"4\": case \"5\": case \"6\": case \"7\": case \"8\": case \"9\": // number\n\t\t\t\t\t\t\tif(this._chunk){\n\t\t\t\t\t\t\t\tthis._chunk.value = s.substring(this._chunk.value, i);\n\t\t\t\t\t\t\t\tthis.push(this._chunk);\n\t\t\t\t\t\t\t\tthis._chunk = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.push({id: \"nonZero\", value: c, line: this._line, pos: this._pos});\n\t\t\t\t\t\t\tthis._state = EXPECTING_NUMBER_DIGIT;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tcase \"t\": // true\n\t\t\t\t\t\tcase \"f\": // false\n\t\t\t\t\t\tcase \"n\": // null\n\t\t\t\t\t\t\tif(this._chunk){\n\t\t\t\t\t\t\t\tthis._chunk.value = s.substring(this._chunk.value, i);\n\t\t\t\t\t\t\t\tthis.push(this._chunk);\n\t\t\t\t\t\t\t\tthis._chunk = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis._literal = LITERALS[c];\n\t\t\t\t\t\t\tk = Math.min(this._literal.length + i, n);\n\t\t\t\t\t\t\tfor(j = 1, ++i; i < k; ++j, ++i){\n\t\t\t\t\t\t\t\tif(this._literal[j] !== s[i]) {\n\t\t\t\t\t\t\t\t\treturn callback(new Error(\"While matching '\" + this._literal + \"' encountered '\" + s[i] + \"' instead of '\" + this._literal[j] + \"'\"));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(j < this._literal.length){\n\t\t\t\t\t\t\t\tthis._literalFrom = j;\n\t\t\t\t\t\t\t\tbreak main;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.push({id: this._literal, value: this._literal, line: this._line, pos: this._pos});\n\t\t\t\t\t\t\t--i;\n\t\t\t\t\t\t\tthis._pos += this._literal.length - 1;\n\t\t\t\t\t\t\tthis._literal = null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \" \": case \"\\t\": case \"\\r\": case \"\\n\": // ws\n\t\t\t\t\t\t\tif(this._chunk && this._chunk.id !== \"ws\"){\n\t\t\t\t\t\t\t\tthis._chunk.value = s.substring(this._chunk.value, i);\n\t\t\t\t\t\t\t\tthis.push(this._chunk);\n\t\t\t\t\t\t\t\tthis._chunk = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(!this._chunk){\n\t\t\t\t\t\t\t\tthis._chunk = {id: \"ws\", value: i, line: this._line, pos: this._pos};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tcase \"]\":\n\t\t\t\t\t\t\tif(this._chunk){\n\t\t\t\t\t\t\t\tthis._chunk.value = s.substring(this._chunk.value, i);\n\t\t\t\t\t\t\t\tthis.push(this._chunk);\n\t\t\t\t\t\t\t\tthis._chunk = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(this._state !== EXPECTING_ARRAY_FIRST){\n\t\t\t\t\t\t\t\treturn callback(new Error(\"Expected a value but got ']' instead\"));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.push({id: c, value: c, line: this._line, pos: this._pos});\n\t\t\t\t\t\t\tthis._parent = this._stack.pop();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn callback(new Error(\"Expected a value\"));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase EXPECTING_KEY_FIRST:\n\t\t\t\tcase EXPECTING_KEY:\n\t\t\t\t\tswitch(c){\n\t\t\t\t\t\tcase \"}\":\n\t\t\t\t\t\t\tif(this._chunk){\n\t\t\t\t\t\t\t\tthis._chunk.value = s.substring(this._chunk.value, i);\n\t\t\t\t\t\t\t\tthis.push(this._chunk);\n\t\t\t\t\t\t\t\tthis._chunk = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(this._state !== EXPECTING_KEY_FIRST){\n\t\t\t\t\t\t\t\treturn callback(new Error(\"Expected a key value\"));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.push({id: c, value: c, line: this._line, pos: this._pos});\n\t\t\t\t\t\t\tthis._parent = this._stack.pop();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"\\\"\":\n\t\t\t\t\t\t\tif(this._chunk){\n\t\t\t\t\t\t\t\tthis._chunk.value = s.substring(this._chunk.value, i);\n\t\t\t\t\t\t\t\tthis.push(this._chunk);\n\t\t\t\t\t\t\t\tthis._chunk = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.push({id: c, value: c, line: this._line, pos: this._pos});\n\t\t\t\t\t\t\tthis._state = EXPECTING_KEY_VALUE;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tcase \" \": case \"\\t\": case \"\\r\": case \"\\n\": // ws\n\t\t\t\t\t\t\tif(this._chunk && this._chunk.id !== \"ws\"){\n\t\t\t\t\t\t\t\tthis._chunk.value = s.substring(this._chunk.value, i);\n\t\t\t\t\t\t\t\tthis.push(this._chunk);\n\t\t\t\t\t\t\t\tthis._chunk = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(!this._chunk){\n\t\t\t\t\t\t\t\tthis._chunk = {id: \"ws\", value: i, line: this._line, pos: this._pos};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn callback(new Error(\"Expected a key\"));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase EXPECTING_KEY_COLON:\n\t\t\t\t\tswitch(c){\n\t\t\t\t\t\tcase \":\":\n\t\t\t\t\t\t\tif(this._chunk){\n\t\t\t\t\t\t\t\tthis._chunk.value = s.substring(this._chunk.value, i);\n\t\t\t\t\t\t\t\tthis.push(this._chunk);\n\t\t\t\t\t\t\t\tthis._chunk = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.push({id: c, value: c, line: this._line, pos: this._pos});\n\t\t\t\t\t\t\tthis._state = EXPECTING_VALUE;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tcase \" \": case \"\\t\": case \"\\r\": case \"\\n\": // ws\n\t\t\t\t\t\t\tif(this._chunk && this._chunk.id !== \"ws\"){\n\t\t\t\t\t\t\t\tthis._chunk.value = s.substring(this._chunk.value, i);\n\t\t\t\t\t\t\t\tthis.push(this._chunk);\n\t\t\t\t\t\t\t\tthis._chunk = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(!this._chunk){\n\t\t\t\t\t\t\t\tthis._chunk = {id: \"ws\", value: i, line: this._line, pos: this._pos};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn callback(new Error(\"Expected ':'\"));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase EXPECTING_OBJECT_STOP:\n\t\t\t\t\tswitch(c){\n\t\t\t\t\t\tcase \"}\":\n\t\t\t\t\t\t\tif(this._chunk){\n\t\t\t\t\t\t\t\tthis._chunk.value = s.substring(this._chunk.value, i);\n\t\t\t\t\t\t\t\tthis.push(this._chunk);\n\t\t\t\t\t\t\t\tthis._chunk = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.push({id: c, value: c, line: this._line, pos: this._pos});\n\t\t\t\t\t\t\tthis._parent = this._stack.pop();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \",\":\n\t\t\t\t\t\t\tif(this._chunk){\n\t\t\t\t\t\t\t\tthis._chunk.value = s.substring(this._chunk.value, i);\n\t\t\t\t\t\t\t\tthis.push(this._chunk);\n\t\t\t\t\t\t\t\tthis._chunk = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.push({id: c, value: c, line: this._line, pos: this._pos});\n\t\t\t\t\t\t\tthis._state = EXPECTING_KEY;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tcase \" \": case \"\\t\": case \"\\r\": case \"\\n\": // ws\n\t\t\t\t\t\t\tif(this._chunk && this._chunk.id !== \"ws\"){\n\t\t\t\t\t\t\t\tthis._chunk.value = s.substring(this._chunk.value, i);\n\t\t\t\t\t\t\t\tthis.push(this._chunk);\n\t\t\t\t\t\t\t\tthis._chunk = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(!this._chunk){\n\t\t\t\t\t\t\t\tthis._chunk = {id: \"ws\", value: i, line: this._line, pos: this._pos};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn callback(new Error(\"Expected ','\"));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase EXPECTING_ARRAY_STOP:\n\t\t\t\t\tswitch(c){\n\t\t\t\t\t\tcase \"]\":\n\t\t\t\t\t\t\tif(this._chunk){\n\t\t\t\t\t\t\t\tthis._chunk.value = s.substring(this._chunk.value, i);\n\t\t\t\t\t\t\t\tthis.push(this._chunk);\n\t\t\t\t\t\t\t\tthis._chunk = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.push({id: c, value: c, line: this._line, pos: this._pos});\n\t\t\t\t\t\t\tthis._parent = this._stack.pop();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \",\":\n\t\t\t\t\t\t\tif(this._chunk){\n\t\t\t\t\t\t\t\tthis._chunk.value = s.substring(this._chunk.value, i);\n\t\t\t\t\t\t\t\tthis.push(this._chunk);\n\t\t\t\t\t\t\t\tthis._chunk = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.push({id: c, value: c, line: this._line, pos: this._pos});\n\t\t\t\t\t\t\tthis._state = EXPECTING_VALUE;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tcase \" \": case \"\\t\": case \"\\r\": case \"\\n\": // ws\n\t\t\t\t\t\t\tif(this._chunk && this._chunk.id !== \"ws\"){\n\t\t\t\t\t\t\t\tthis._chunk.value = s.substring(this._chunk.value, i);\n\t\t\t\t\t\t\t\tthis.push(this._chunk);\n\t\t\t\t\t\t\t\tthis._chunk = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(!this._chunk){\n\t\t\t\t\t\t\t\tthis._chunk = {id: \"ws\", value: i, line: this._line, pos: this._pos};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn callback(new Error(\"Expected ','\"));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase EXPECTING_KEY_VALUE:\n\t\t\t\tcase EXPECTING_STRING_VALUE:\n\t\t\t\t\tswitch(c){\n\t\t\t\t\t\tcase \"\\\"\":\n\t\t\t\t\t\t\tif(this._chunk){\n\t\t\t\t\t\t\t\tthis._chunk.value = s.substring(this._chunk.value, i);\n\t\t\t\t\t\t\t\tthis.push(this._chunk);\n\t\t\t\t\t\t\t\tthis._chunk = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.push({id: c, value: c, line: this._line, pos: this._pos});\n\t\t\t\t\t\t\tif(this._state === EXPECTING_KEY_VALUE){\n\t\t\t\t\t\t\t\tthis._state = EXPECTING_KEY_COLON;\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"\\\\\":\n\t\t\t\t\t\t\tif(this._chunk){\n\t\t\t\t\t\t\t\tthis._chunk.value = s.substring(this._chunk.value, i);\n\t\t\t\t\t\t\t\tthis.push(this._chunk);\n\t\t\t\t\t\t\t\tthis._chunk = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(i + 1 < n){\n\t\t\t\t\t\t\t\tc = s[++i];\n\t\t\t\t\t\t\t\tswitch(c){\n\t\t\t\t\t\t\t\t\tcase \"\\\"\": case \"/\": case \"b\": case \"f\":\n\t\t\t\t\t\t\t\t\tcase \"\\\\\": case \"n\": case \"r\": case \"t\":\n\t\t\t\t\t\t\t\t\t\tthis.push({id: \"escapedChars\", value: \"\\\\\" + c, line: this._line, pos: this._pos});\n\t\t\t\t\t\t\t\t\t\t++this._pos;\n\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\tcase \"u\":\n\t\t\t\t\t\t\t\t\t\tk = Math.min(i + 5, n);\n\t\t\t\t\t\t\t\t\t\tfor(j = 1, ++i; i < k; ++j, ++i){\n\t\t\t\t\t\t\t\t\t\t\tif(!hex[s[i]]) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn callback(new Error(\"While matching hexadecimals encountered '\" + s[i] + \"'\"));\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tif(j < 5){\n\t\t\t\t\t\t\t\t\t\t\t// emit this._literal\n\t\t\t\t\t\t\t\t\t\t\tthis._literal = HEXADECIMALS;\n\t\t\t\t\t\t\t\t\t\t\tthis._literalFrom = j;\n\t\t\t\t\t\t\t\t\t\t\tbreak main;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tthis.push({id: \"escapedChars\", value: \"\\\\u\" + s.substr(i - 4, 4),\n\t\t\t\t\t\t\t\t\t\t\tline: this._line, pos: this._pos});\n\t\t\t\t\t\t\t\t\t\t--i;\n\t\t\t\t\t\t\t\t\t\tthis._pos += 5;\n\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\treturn callback(new Error(\"Wrong escaped symbol '\" + c + \"'\"));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis._literal = ESCAPED_CHAR;\n\t\t\t\t\t\t\tbreak main;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tif(this._chunk && this._chunk.id !== \"plainChunk\"){\n\t\t\t\t\t\t\t\tthis._chunk.value = s.substring(this._chunk.value, i);\n\t\t\t\t\t\t\t\tthis.push(this._chunk);\n\t\t\t\t\t\t\t\tthis._chunk = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(!this._chunk){\n\t\t\t\t\t\t\t\tthis._chunk = {id: \"plainChunk\", value: i, line: this._line, pos: this._pos};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase EXPECTING_NUMBER_START:\n\t\t\t\t\tswitch(c){\n\t\t\t\t\t\tcase \"0\":\n\t\t\t\t\t\t\tif(this._chunk){\n\t\t\t\t\t\t\t\tthis._chunk.value = s.substring(this._chunk.value, i);\n\t\t\t\t\t\t\t\tthis.push(this._chunk);\n\t\t\t\t\t\t\t\tthis._chunk = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.push({id: c, value: c, line: this._line, pos: this._pos});\n\t\t\t\t\t\t\tthis._state = EXPECTING_FRACTION;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tcase \"1\": case \"2\": case \"3\":\n\t\t\t\t\t\tcase \"4\": case \"5\": case \"6\":\n\t\t\t\t\t\tcase \"7\": case \"8\": case \"9\":\n\t\t\t\t\t\t\tif(this._chunk){\n\t\t\t\t\t\t\t\tthis._chunk.value = s.substring(this._chunk.value, i);\n\t\t\t\t\t\t\t\tthis.push(this._chunk);\n\t\t\t\t\t\t\t\tthis._chunk = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.push({id: \"nonZero\", value: c, line: this._line, pos: this._pos});\n\t\t\t\t\t\t\tthis._state = EXPECTING_NUMBER_DIGIT;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn callback(new Error(\"Expected a digit\"));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase EXPECTING_NUMBER_DIGIT:\n\t\t\t\tcase EXPECTING_FRACTION:\n\t\t\t\tcase EXPECTING_FRAC_DIGIT:\n\t\t\t\t\tswitch(c){\n\t\t\t\t\t\tcase \"0\": case \"1\": case \"2\": case \"3\": case \"4\":\n\t\t\t\t\t\tcase \"5\": case \"6\": case \"7\": case \"8\": case \"9\":\n\t\t\t\t\t\t\tif(this._chunk && this._chunk.id !== \"numericChunk\"){\n\t\t\t\t\t\t\t\tthis._chunk.value = s.substring(this._chunk.value, i);\n\t\t\t\t\t\t\t\tthis.push(this._chunk);\n\t\t\t\t\t\t\t\tthis._chunk = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(this._state === EXPECTING_FRACTION){\n\t\t\t\t\t\t\t\treturn callback(new Error(\"Expected '.' or 'e'\"));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(!this._chunk){\n\t\t\t\t\t\t\t\tthis._chunk = {id: \"numericChunk\", value: i, line: this._line, pos: this._pos};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tcase \".\":\n\t\t\t\t\t\t\tif(this._chunk){\n\t\t\t\t\t\t\t\tthis._chunk.value = s.substring(this._chunk.value, i);\n\t\t\t\t\t\t\t\tthis.push(this._chunk);\n\t\t\t\t\t\t\t\tthis._chunk = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(this._state === EXPECTING_FRAC_DIGIT){\n\t\t\t\t\t\t\t\treturn callback(new Error(\"Expected a digit\"));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.push({id: c, value: c, line: this._line, pos: this._pos});\n\t\t\t\t\t\t\tthis._state = EXPECTING_FRAC_START;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tcase \"e\": case \"E\":\n\t\t\t\t\t\t\tif(this._chunk){\n\t\t\t\t\t\t\t\tthis._chunk.value = s.substring(this._chunk.value, i);\n\t\t\t\t\t\t\t\tthis.push(this._chunk);\n\t\t\t\t\t\t\t\tthis._chunk = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.push({id: \"exponent\", value: c, line: this._line, pos: this._pos});\n\t\t\t\t\t\t\tthis._state = EXPECTING_EXP_SIGN;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tif(this._chunk){\n\t\t\t\t\t\t\t\tthis._chunk.value = s.substring(this._chunk.value, i);\n\t\t\t\t\t\t\t\tthis.push(this._chunk);\n\t\t\t\t\t\t\t\tthis._chunk = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t--i;\n\t\t\t\t\t\t\t--this._pos;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase EXPECTING_FRAC_START:\n\t\t\t\t\tswitch(c){\n\t\t\t\t\t\tcase \"0\": case \"1\": case \"2\": case \"3\": case \"4\":\n\t\t\t\t\t\tcase \"5\": case \"6\": case \"7\": case \"8\": case \"9\":\n\t\t\t\t\t\t\tif(this._chunk && this._chunk.id !== \"numericChunk\"){\n\t\t\t\t\t\t\t\tthis._chunk.value = s.substring(this._chunk.value, i);\n\t\t\t\t\t\t\t\tthis.push(this._chunk);\n\t\t\t\t\t\t\t\tthis._chunk = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(!this._chunk){\n\t\t\t\t\t\t\t\tthis._chunk = {id: \"numericChunk\", value: i, line: this._line, pos: this._pos};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis._state = EXPECTING_FRAC_DIGIT;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn callback(new Error(\"Expected a digit\"));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase EXPECTING_EXP_SIGN:\n\t\t\t\tcase EXPECTING_EXP_START:\n\t\t\t\t\tswitch(c){\n\t\t\t\t\t\tcase \"-\": case \"+\":\n\t\t\t\t\t\t\tif(this._state === EXPECTING_EXP_START){\n\t\t\t\t\t\t\t\treturn callback(new Error(\"Expected a digit\"));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(this._chunk){\n\t\t\t\t\t\t\t\tthis._chunk.value = s.substring(this._chunk.value, i);\n\t\t\t\t\t\t\t\tthis.push(this._chunk);\n\t\t\t\t\t\t\t\tthis._chunk = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.push({id: c, value: c, line: this._line, pos: this._pos});\n\t\t\t\t\t\t\tthis._state = EXPECTING_EXP_START;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tcase \"0\": case \"1\": case \"2\": case \"3\": case \"4\":\n\t\t\t\t\t\tcase \"5\": case \"6\": case \"7\": case \"8\": case \"9\":\n\t\t\t\t\t\t\tif(this._chunk && this._chunk.id !== \"numericChunk\"){\n\t\t\t\t\t\t\t\tthis._chunk.value = s.substring(this._chunk.value, i);\n\t\t\t\t\t\t\t\tthis.push(this._chunk);\n\t\t\t\t\t\t\t\tthis._chunk = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(!this._chunk){\n\t\t\t\t\t\t\t\tthis._chunk = {id: \"numericChunk\", value: i, line: this._line, pos: this._pos};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis._state = EXPECTING_EXP_DIGIT;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn callback(new Error(\"Expected a digit\"));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase EXPECTING_EXP_DIGIT:\n\t\t\t\t\tswitch(c){\n\t\t\t\t\t\tcase \"0\": case \"1\": case \"2\": case \"3\": case \"4\":\n\t\t\t\t\t\tcase \"5\": case \"6\": case \"7\": case \"8\": case \"9\":\n\t\t\t\t\t\t\tif(this._chunk && this._chunk.id !== \"numericChunk\"){\n\t\t\t\t\t\t\t\tthis._chunk.value = s.substring(this._chunk.value, i);\n\t\t\t\t\t\t\t\tthis.push(this._chunk);\n\t\t\t\t\t\t\t\tthis._chunk = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(!this._chunk){\n\t\t\t\t\t\t\t\tthis._chunk = {id: \"numericChunk\", value: i, line: this._line, pos: this._pos};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t--i;\n\t\t\t\t\t\t\t--this._pos;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\treturn callback(new Error(\"Unexpected this._state: \" + this._state));\n\t\t\t}\n\t\t\t// end of value\n\t\t\tswitch(this._parent){\n\t\t\t\tcase PARSING_OBJECT:\n\t\t\t\t\tthis._state = EXPECTING_OBJECT_STOP;\n\t\t\t\t\tbreak;\n\t\t\t\tcase PARSING_ARRAY:\n\t\t\t\t\tthis._state = EXPECTING_ARRAY_STOP;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthis._state = EXPECTING_NOTHING;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif(this._chunk){\n\t\t\tthis._chunk.value = s.substring(this._chunk.value, i);\n\t\t\tthis.push(this._chunk);\n\t\t\tthis._chunk = null;\n\t\t}\n\t}while(false);\n\n\tcallback();\n};\n\nParser.prototype._flush = function flush(callback){\n\tswitch(this._state){\n\t\t// normal end\n\t\tcase EXPECTING_NOTHING:\n\t\t// optional number parts\n\t\tcase EXPECTING_NUMBER_DIGIT:\n\t\tcase EXPECTING_FRACTION:\n\t\tcase EXPECTING_FRAC_DIGIT:\n\t\tcase EXPECTING_EXP_DIGIT:\n\t\t\tcallback();\n\t\t\treturn;\n\t}\n\tcallback(new Error(\"Parser didn't finish, yet the stream has ended.\"));\n};\n\nmodule.exports = Parser;\n","/home/travis/build/npmtest/node-npmtest-stream-json/node_modules/stream-json/ClassicParser.js":"\"use strict\";\n\n\nvar Scanner    = require(\"parser-toolkit/Scanner\");\nvar JsonParser = require(\"parser-toolkit/topDown/Parser\");\n\nvar json = require(\"./Grammar\");\n\nvar util = require(\"util\");\nvar Transform = require(\"stream\").Transform;\n\n\nfunction Parser(options){\n\tTransform.call(this, options);\n\tthis._writableState.objectMode = false;\n\tthis._readableState.objectMode = true;\n\n\tthis._scanner = new Scanner();\n\tthis._parser  = new JsonParser(json);\n\n\tvar self = this;\n\tthis._parser.onToken = function onToken(token){\n\t\tself.push(token);\n\t};\n}\nutil.inherits(Parser, Transform);\n\nParser.prototype._transform = function transform(chunk, encoding, callback){\n\tthis._scanner.addBuffer(chunk.toString());\n\tthis._processInput(callback);\n};\n\nParser.prototype._flush = function flush(callback){\n\tthis._scanner.addBuffer(\"\", true);\n\tthis._processInput(callback);\n};\n\nParser.prototype._processInput = function processInput(callback){\n\ttry{\n\t\tif(this._expected === null){\n\t\t\tthrow Error(\"Unexpected input after parser has finished.\");\n\t\t}\n\t\tif(typeof this._expected == \"undefined\"){\n\t\t\tthis._expected = this._parser.getExpectedState();\n\t\t}\n\t\tif(this._expected){\n\t\t\tfor(;;){\n\t\t\t\tvar token = this._scanner.getToken(this._expected);\n\t\t\t\tif(token === true){\n\t\t\t\t\t// need more input\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tthis._parser.putToken(token, this._scanner);\n\t\t\t\tthis._expected = this._parser.getExpectedState();\n\t\t\t\tif(!this._expected){\n\t\t\t\t\t// we are done\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(this._expected === null && !this._scanner.isFinished()){\n\t\t\tthrow Error(\"Scanner has unprocessed symbols.\");\n\t\t}\n\t}catch(err){\n\t\tcallback(err);\n\t\treturn;\n\t}\n\tcallback();\n};\n\n\nmodule.exports = Parser;\n","/home/travis/build/npmtest/node-npmtest-stream-json/node_modules/stream-json/Grammar.js":"/* UMD.define */ (typeof define==\"function\"&&define||function(d,f,m){m={module:module,require:require};module.exports=f.apply(null,d.map(function(n){return m[n]||require(n)}))})\n([\"parser-toolkit/topDown/Grammar\"], function(Grammar){\n\t\"use strict\";\n\n\tvar rule = Grammar.rule, any = Grammar.any, maybe = Grammar.maybe, repeat = Grammar.repeat;\n\n\tvar ws           = {id: \"ws\",           pattern: /\\s{1,256}/},\n\t\t// numeric tokens\n\t\tnonZero      = {id: \"nonZero\",      pattern: /[1-9]/},\n\t\texponent     = {id: \"exponent\",     pattern: /[eE]/},\n\t\tnumericChunk = {id: \"numericChunk\", pattern: /\\d{1,256}/},\n\t\t// string tokens\n\t\tplainChunk   = {id: \"plainChunk\",   pattern: /[^\\\"\\\\]{1,256}/},\n\t\tescapedChars = {id: \"escapedChars\", pattern: /\\\\(?:[bfnrt\\\"\\\\\\/]|u[0-9a-fA-F]{4})/};\n\n\tvar json = new Grammar({\n\t\t\tmain:   [rule(\"ws\"), rule(\"value\")],\n\t\t\tws:     repeat(ws),\n\t\t\tvalue:  [any(rule(\"object\"), rule(\"array\"), rule(\"string\"),\n\t\t\t\trule(\"number\"), [\"-\", rule(\"number\")], \"true\", \"false\", \"null\"), rule(\"ws\")],\n\t\t\tobject: [\"{\", rule(\"ws\"), maybe(rule(\"pair\"),\n\t\t\t\trepeat(\",\", rule(\"ws\"), rule(\"pair\"))), \"}\"],\n\t\t\tpair:   [rule(\"string\"), rule(\"ws\"), \":\", rule(\"ws\"), rule(\"value\")],\n\t\t\tarray:  [\"[\", rule(\"ws\"), maybe(rule(\"value\"),\n\t\t\t\trepeat(\",\", rule(\"ws\"), rule(\"value\"))), \"]\"],\n\t\t\tstring: [\"\\\"\", repeat(any(plainChunk, escapedChars)), \"\\\"\"],\n\t\t\tnumber: [any(\"0\", [nonZero, repeat(numericChunk)]),\n\t\t\t\tmaybe(\".\", repeat(numericChunk)), maybe(exponent, maybe(any(\"-\", \"+\")),\n\t\t\t\trepeat(numericChunk))]\n\t\t});\n\n\treturn json;\n});\n","/home/travis/build/npmtest/node-npmtest-stream-json/node_modules/stream-json/Emitter.js":"\"use strict\";\n\n\nvar util = require(\"util\");\nvar Writable = require(\"stream\").Writable;\n\n\nfunction Emitter(options){\n\tWritable.call(this, options);\n\tthis._writableState.objectMode = true;\n}\nutil.inherits(Emitter, Writable);\n\nEmitter.prototype._write = function write(chunk, encoding, callback){\n\tthis.emit(chunk.name, chunk.value);\n\tcallback();\n};\n\n\nmodule.exports = Emitter;\n","/home/travis/build/npmtest/node-npmtest-stream-json/node_modules/stream-json/Filter.js":"\"use strict\";\n\n\nvar util = require(\"util\");\nvar Transform = require(\"stream\").Transform;\n\n\nfunction Filter(options){\n\tTransform.call(this, options);\n\tthis._writableState.objectMode = true;\n\tthis._readableState.objectMode = true;\n\n\tvar f = options.filter;\n\tif(typeof f == \"function\"){\n\t\tthis._func = f;\n\t}else if(f instanceof RegExp){\n\t\tthis._regexp = f;\n\t\tthis._func = this._pattern;\n\t}else{\n\t\tthis._func = this._allowAll;\n\t}\n\tthis._separator = options.separator || \".\";\n\n\tthis._previous = [];\n\tthis._stack = [];\n\tthis._collectKey = false;\n\tthis._key = \"\";\n}\nutil.inherits(Filter, Transform);\n\nFilter.prototype._transform = function transform(chunk, encoding, callback){\n\t// skip keys\n\tif(this._collectKey){\n\t\tif(chunk.name === \"endKey\"){\n\t\t\tthis._collectKey = false;\n\t\t\tthis._stack.pop();\n\t\t\tthis._stack.push(this._key);\n\t\t\tthis._key = \"\";\n\t\t}else{\n\t\t\tthis._key += chunk.value;\n\t\t}\n\t\tcallback();\n\t\treturn;\n\t}\n\n\tswitch(chunk.name){\n\t\tcase \"startKey\":\n\t\t\tthis._collectKey = true;\n\t\t\t// intentional fall down\n\t\tcase \"keyValue\":\n\t\t\tcallback();\n\t\t\treturn;\n\t\tcase \"endObject\":\n\t\tcase \"endArray\":\n\t\t\tthis._stack.pop();\n\t\t\tbreak;\n\t}\n\n\t// check if the chunk should be outputted\n\tif(this._func(this._stack, chunk)){\n\t\tswitch(chunk.name){\n\t\t\tcase \"startObject\":\n\t\t\t\tthis._stack.push(true);\n\t\t\t\tthis._sync();\n\t\t\t\tbreak;\n\t\t\tcase \"startArray\":\n\t\t\t\tthis._stack.push(0);\n\t\t\t\tthis._sync();\n\t\t\t\tbreak;\n\t\t\tcase \"endObject\":\n\t\t\tcase \"endArray\":\n\t\t\t\tthis._sync();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis._sync();\n\t\t\t\tthis.push(chunk);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t// update stack\n\tswitch(chunk.name){\n\t\tcase \"endObject\":\n\t\tcase \"endArray\":\n\t\tcase \"endString\":\n\t\tcase \"endNumber\":\n\t\tcase \"nullValue\":\n\t\tcase \"trueValue\":\n\t\tcase \"falseValue\":\n\t\t\t// update array's index\n\t\t\tvar index = this._stack.pop();\n\t\t\tthis._stack.push(typeof index == \"number\" ? index + 1 : index);\n\t\t\tbreak;\n\t}\n\tcallback();\n};\n\nFilter.prototype._flush = function flush(callback){\n\tthis._stack = [];\n\tthis._sync();\n\tcallback();\n}\n\nFilter.prototype._sync = function sync(){\n\tvar p = this._previous, pl = p.length,\n\t\ts = this._stack, sl = s.length,\n\t\tn = Math.min(pl, sl), i, j, value;\n\tfor(i = 0; i < n && p[i] === s[i]; ++i);\n\tif(pl === sl && i >= n){\n\t\treturn;\n\t}\n\tfor(j = pl - 1; j > i; --j){\n\t\tvalue = p[j];\n\t\tthis.push({name: typeof value == \"number\" ? \"endArray\" : \"endObject\"});\n\t}\n\tif(pl <= i){\n\t\tvalue = s[i];\n\t\tthis.push({name: typeof value == \"number\" ? \"startArray\" : \"startObject\"});\n\t}\n\tif(sl <= i){\n\t\tvalue = p[i];\n\t\tthis.push({name: typeof value == \"number\" ? \"endArray\" : \"endObject\"});\n\t}\n\tif(i < sl){\n\t\tvalue = s[i];\n\t\tif(typeof value == \"string\"){\n\t\t\tthis.push({name: \"startKey\"});\n\t\t\tthis.push({name: \"stringChunk\", value: value});\n\t\t\tthis.push({name: \"endKey\"});\n\t\t\tthis.push({name: \"keyValue\", value: value});\n\t\t}\n\t\tfor(j = i + 1; j < sl; ++j){\n\t\t\tvalue = s[j];\n\t\t\tif(typeof value == \"string\"){\n\t\t\t\tthis.push({name: \"startObject\"});\n\t\t\t\tthis.push({name: \"startKey\"});\n\t\t\t\tthis.push({name: \"stringChunk\", value: value});\n\t\t\t\tthis.push({name: \"endKey\"});\n\t\t\t\tthis.push({name: \"keyValue\", value: value});\n\t\t\t}else if(typeof value == \"boolean\"){\n\t\t\t\tthis.push({name: \"startObject\"});\n\t\t\t}else{\n\t\t\t\tthis.push({name: \"startArray\"});\n\t\t\t}\n\t\t}\n\t}\n\tthis._previous = s.slice(0);\n};\n\nFilter.prototype._pattern = function pattern(path){\n\treturn this._regexp.test(path.join(this._separator));\n};\n\nFilter.prototype._allowAll = function allowAll(){\n\treturn true;\n};\n\n\nmodule.exports = Filter;\n","/home/travis/build/npmtest/node-npmtest-stream-json/node_modules/stream-json/Packer.js":"\"use strict\";\n\n\nvar util = require(\"util\");\nvar Transform = require(\"stream\").Transform;\n\n\nfunction Packer(options){\n\tTransform.call(this, options);\n\tthis._writableState.objectMode = true;\n\tthis._readableState.objectMode = true;\n\n\tthis._eventMap = {};\n\tthis._buffer   = \"\";\n\n\tif(options.packKeys){\n\t\tthis._eventMap.startKey    = \"_collectString\";\n\t\tthis._eventMap.endKey      = \"_sendKey\";\n\t}\n\tif(options.packStrings){\n\t\tthis._eventMap.startString = \"_collectString\";\n\t\tthis._eventMap.endString   = \"_sendString\";\n\t}\n\tif(options.packNumbers){\n\t\tthis._eventMap.startNumber = \"_collectNumber\";\n\t\tthis._eventMap.endNumber   = \"_sendNumber\";\n\t}\n}\nutil.inherits(Packer, Transform);\n\nPacker.prototype._transform = function transform(chunk, encoding, callback){\n\tthis.push(chunk);\n\tif(this._eventMap[chunk.name]){\n\t\tthis[this._eventMap[chunk.name]](chunk);\n\t}\n\tcallback();\n};\n\nPacker.prototype._addToBuffer = function addToBuffer(chunk){\n\tthis._buffer += chunk.value;\n};\n\nPacker.prototype._collectString = function collectString(){\n\tthis._eventMap.stringChunk = \"_addToBuffer\";\n};\n\nPacker.prototype._collectNumber = function collectNumber(){\n\tthis._eventMap.numberChunk = \"_addToBuffer\";\n};\n\nPacker.prototype._sendKey = function sendKey(){\n\tthis.push({name: \"keyValue\", value: this._buffer});\n\tthis._buffer = \"\";\n\tthis._eventMap.stringChunk = null;\n};\n\nPacker.prototype._sendString = function sendString(){\n\tthis.push({name: \"stringValue\", value: this._buffer});\n\tthis._buffer = \"\";\n\tthis._eventMap.stringChunk = null;\n};\n\nPacker.prototype._sendNumber = function sendNumber(){\n\tthis.push({name: \"numberValue\", value: this._buffer});\n\tthis._buffer = \"\";\n\tthis._eventMap.numberChunk = null;\n};\n\n\nmodule.exports = Packer;\n","/home/travis/build/npmtest/node-npmtest-stream-json/node_modules/stream-json/Parser.js":"\"use strict\";\n\n\nvar util = require(\"util\");\nvar Transform = require(\"stream\").Transform;\n\n\nfunction Parser(options){\n\tTransform.call(this, options);\n\tthis._writableState.objectMode = false;\n\tthis._readableState.objectMode = true;\n\n\tthis._buffer = \"\";\n\tthis._done   = false;\n\tthis._expect = \"value\";\n\tthis._stack  = [];\n\tthis._parent = \"\";\n}\nutil.inherits(Parser, Transform);\n\nParser.prototype._transform = function transform(chunk, encoding, callback){\n\tthis._buffer += chunk.toString();\n\tthis._processInput(callback);\n};\n\nParser.prototype._flush = function flush(callback){\n\tthis._done = true;\n\tthis._processInput(callback);\n};\n\nvar value1  = /^(?:[\\\"\\{\\[\\]\\-\\d]|true\\b|false\\b|null\\b|\\s{1,256})/,\n\tstring  = /^(?:[^\\\"\\\\]{1,256}|\\\\[bfnrt\\\"\\\\\\/]|\\\\u[\\da-fA-F]{4}|\\\")/,\n\tkey1    = /^(?:[\\\"\\}]|\\s{1,256})/,\n\tcolon   = /^(?:\\:|\\s{1,256})/,\n\tcomma   = /^(?:[\\,\\]\\}]|\\s{1,256})/,\n\tws      = /^\\s{1,256}/,\n\tnumberStart     = /^\\d/,\n\tnumberDigit     = /^\\d{0,256}/,\n\tnumberFraction  = /^[\\.eE]/,\n\tnumberFracStart = numberStart,\n\tnumberFracDigit = numberDigit,\n\tnumberExponent  = /^[eE]/,\n\tnumberExpSign   = /^[-+]/,\n\tnumberExpStart  = numberStart,\n\tnumberExpDigit  = numberDigit;\n\nParser.prototype._processInput = function(callback){\n\tvar match, value;\n\tmain: for(;;){\n\t\tswitch(this._expect){\n\t\t\tcase \"value1\":\n\t\t\tcase \"value\":\n\t\t\t\tmatch = value1.exec(this._buffer);\n\t\t\t\tif(!match){\n\t\t\t\t\tif(this._buffer){\n\t\t\t\t\t\tif(this._done){\n\t\t\t\t\t\t\treturn callback(new Error(\"Parser cannot parse input: expected a value\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(this._done){\n\t\t\t\t\t\treturn callback(new Error(\"Parser has expected a value\"));\n\t\t\t\t\t}\n\t\t\t\t\t// wait for more input\n\t\t\t\t\tbreak main;\n\t\t\t\t}\n\t\t\t\tvalue = match[0];\n\t\t\t\tswitch(value){\n\t\t\t\t\tcase \"\\\"\":\n\t\t\t\t\t\tthis.push({id: value, value: value});\n\t\t\t\t\t\tthis._expect = \"string\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"{\":\n\t\t\t\t\t\tthis.push({id: value, value: value});\n\t\t\t\t\t\tthis._stack.push(this._parent);\n\t\t\t\t\t\tthis._parent = \"object\";\n\t\t\t\t\t\tthis._expect = \"key1\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"[\":\n\t\t\t\t\t\tthis.push({id: value, value: value});\n\t\t\t\t\t\tthis._stack.push(this._parent);\n\t\t\t\t\t\tthis._parent = \"array\";\n\t\t\t\t\t\tthis._expect = \"value1\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"]\":\n\t\t\t\t\t\tif(this._expect !== \"value1\"){\n\t\t\t\t\t\t\treturn callback(new Error(\"Parser cannot parse input: unexpected token ']'\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.push({id: value, value: value});\n\t\t\t\t\t\tthis._parent = this._stack.pop();\n\t\t\t\t\t\tif(this._parent){\n\t\t\t\t\t\t\tthis._expect = this._parent === \"object\" ? \"objectStop\" : \"arrayStop\";\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tthis._expect = \"done\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"-\":\n\t\t\t\t\t\tthis.push({id: value, value: value});\n\t\t\t\t\t\tthis._expect = \"numberStart\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"0\":\n\t\t\t\t\t\tthis.push({id: value, value: value});\n\t\t\t\t\t\tthis._expect = \"numberFraction\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"1\":\n\t\t\t\t\tcase \"2\":\n\t\t\t\t\tcase \"3\":\n\t\t\t\t\tcase \"4\":\n\t\t\t\t\tcase \"5\":\n\t\t\t\t\tcase \"6\":\n\t\t\t\t\tcase \"7\":\n\t\t\t\t\tcase \"8\":\n\t\t\t\t\tcase \"9\":\n\t\t\t\t\t\tthis.push({id: \"nonZero\", value: value});\n\t\t\t\t\t\tthis._expect = \"numberDigit\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"true\":\n\t\t\t\t\tcase \"false\":\n\t\t\t\t\tcase \"null\":\n\t\t\t\t\t\tif(this._buffer.length === value.length && !this._done){\n\t\t\t\t\t\t\t// wait for more input\n\t\t\t\t\t\t\tbreak main;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.push({id: value, value: value});\n\t\t\t\t\t\tif(this._parent){\n\t\t\t\t\t\t\tthis._expect = this._parent === \"object\" ? \"objectStop\" : \"arrayStop\";\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tthis._expect = \"done\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t// default: // ws\n\t\t\t\t}\n\t\t\t\tthis._buffer = this._buffer.substring(value.length);\n\t\t\t\tbreak;\n\t\t\tcase \"keyVal\":\n\t\t\tcase \"string\":\n\t\t\t\tmatch = string.exec(this._buffer);\n\t\t\t\tif(!match){\n\t\t\t\t\tif(this._buffer){\n\t\t\t\t\t\tif(this._done || this._buffer.length >= 6){\n\t\t\t\t\t\t\treturn callback(new Error(\"Parser cannot parse input: escaped characters\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(this._done){\n\t\t\t\t\t\treturn callback(new Error(\"Parser has expected a string value\"));\n\t\t\t\t\t}\n\t\t\t\t\t// wait for more input\n\t\t\t\t\tbreak main;\n\t\t\t\t}\n\t\t\t\tvalue = match[0];\n\t\t\t\tif(value === \"\\\"\"){\n\t\t\t\t\tthis.push({id: value, value: value});\n\t\t\t\t\tif(this._expect === \"keyVal\"){\n\t\t\t\t\t\tthis._expect = \"colon\";\n\t\t\t\t\t}else{\n\t\t\t\t\t\tif(this._parent){\n\t\t\t\t\t\t\tthis._expect = this._parent === \"object\" ? \"objectStop\" : \"arrayStop\";\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tthis._expect = \"done\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}else if(value.length > 1 && value.charAt(0) === \"\\\\\"){\n\t\t\t\t\tthis.push({id: \"escapedChars\", value: value});\n\t\t\t\t}else{\n\t\t\t\t\tthis.push({id: \"plainChunk\", value: value});\n\t\t\t\t}\n\t\t\t\tthis._buffer = this._buffer.substring(value.length);\n\t\t\t\tbreak;\n\t\t\tcase \"key1\":\n\t\t\tcase \"key\":\n\t\t\t\tmatch = key1.exec(this._buffer);\n\t\t\t\tif(!match){\n\t\t\t\t\tif(this._buffer || this._done){\n\t\t\t\t\t\treturn callback(new Error(\"Parser cannot parse input: expected an object key\"));\n\t\t\t\t\t}\n\t\t\t\t\t// wait for more input\n\t\t\t\t\tbreak main;\n\t\t\t\t}\n\t\t\t\tvalue = match[0];\n\t\t\t\tif(value === \"\\\"\"){\n\t\t\t\t\tthis.push({id: value, value: value});\n\t\t\t\t\tthis._expect = \"keyVal\";\n\t\t\t\t}else if(value === \"}\"){\n\t\t\t\t\tif(this._expect !== \"key1\"){\n\t\t\t\t\t\treturn callback(new Error(\"Parser cannot parse input: unexpected token '}'\"));\n\t\t\t\t\t}\n\t\t\t\t\tthis.push({id: value, value: value});\n\t\t\t\t\tthis._parent = this._stack.pop();\n\t\t\t\t\tif(this._parent){\n\t\t\t\t\t\tthis._expect = this._parent === \"object\" ? \"objectStop\" : \"arrayStop\";\n\t\t\t\t\t}else{\n\t\t\t\t\t\tthis._expect = \"done\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._buffer = this._buffer.substring(value.length);\n\t\t\t\tbreak;\n\t\t\tcase \"colon\":\n\t\t\t\tmatch = colon.exec(this._buffer);\n\t\t\t\tif(!match){\n\t\t\t\t\tif(this._buffer || this._done){\n\t\t\t\t\t\treturn callback(new Error(\"Parser cannot parse input: expected ':'\"));\n\t\t\t\t\t}\n\t\t\t\t\t// wait for more input\n\t\t\t\t\tbreak main;\n\t\t\t\t}\n\t\t\t\tvalue = match[0];\n\t\t\t\tif(value === \":\"){\n\t\t\t\t\tthis.push({id: value, value: value});\n\t\t\t\t\tthis._expect = \"value\";\n\t\t\t\t}\n\t\t\t\tthis._buffer = this._buffer.substring(value.length);\n\t\t\t\tbreak;\n\t\t\tcase \"arrayStop\":\n\t\t\tcase \"objectStop\":\n\t\t\t\tmatch = comma.exec(this._buffer);\n\t\t\t\tif(!match){\n\t\t\t\t\tif(this._buffer || this._done){\n\t\t\t\t\t\treturn callback(new Error(\"Parser cannot parse input: expected ','\"));\n\t\t\t\t\t}\n\t\t\t\t\t// wait for more input\n\t\t\t\t\tbreak main;\n\t\t\t\t}\n\t\t\t\tvalue = match[0];\n\t\t\t\tif(value === \",\"){\n\t\t\t\t\tthis.push({id: value, value: value});\n\t\t\t\t\tthis._expect = this._expect === \"arrayStop\" ? \"value\" : \"key\";\n\t\t\t\t}else if(value === \"}\" || value === \"]\"){\n\t\t\t\t\tthis.push({id: value, value: value});\n\t\t\t\t\tthis._parent = this._stack.pop();\n\t\t\t\t\tif(this._parent){\n\t\t\t\t\t\tthis._expect = this._parent === \"object\" ? \"objectStop\" : \"arrayStop\";\n\t\t\t\t\t}else{\n\t\t\t\t\t\tthis._expect = \"done\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._buffer = this._buffer.substring(value.length);\n\t\t\t\tbreak;\n\t\t\t// number chunks\n\t\t\tcase \"numberStart\": // [0-9]\n\t\t\t\tmatch = numberStart.exec(this._buffer);\n\t\t\t\tif(!match){\n\t\t\t\t\tif(this._buffer || this._done){\n\t\t\t\t\t\treturn callback(new Error(\"Parser cannot parse input: expected a digit\"));\n\t\t\t\t\t}\n\t\t\t\t\t// wait for more input\n\t\t\t\t\tbreak main;\n\t\t\t\t}\n\t\t\t\tvalue = match[0];\n\t\t\t\tif(value === \"0\"){\n\t\t\t\t\tthis.push({id: value, value: value});\n\t\t\t\t\tthis._expect = \"numberFraction\";\n\t\t\t\t}else{\n\t\t\t\t\tthis.push({id: \"nonZero\", value: value});\n\t\t\t\t\tthis._expect = \"numberDigit\";\n\t\t\t\t}\n\t\t\t\tthis._buffer = this._buffer.substring(value.length);\n\t\t\t\tbreak;\n\t\t\tcase \"numberDigit\": // [0-9]*\n\t\t\t\tmatch = numberDigit.exec(this._buffer);\n\t\t\t\tvalue = match[0];\n\t\t\t\tif(value){\n\t\t\t\t\tthis.push({id: \"numericChunk\", value: value});\n\t\t\t\t\tthis._buffer = this._buffer.substring(value.length);\n\t\t\t\t}else{\n\t\t\t\t\tif(this._buffer){\n\t\t\t\t\t\tthis._expect = \"numberFraction\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif(this._done){\n\t\t\t\t\t\tif(this._parent){\n\t\t\t\t\t\t\tthis._expect = this._parent === \"object\" ? \"objectStop\" : \"arrayStop\";\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tthis._expect = \"done\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t// wait for more input\n\t\t\t\t\tbreak main;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"numberFraction\": // [\\.eE]?\n\t\t\t\tmatch = numberFraction.exec(this._buffer);\n\t\t\t\tif(!match){\n\t\t\t\t\tif(this._buffer || this._done){\n\t\t\t\t\t\tif(this._parent){\n\t\t\t\t\t\t\tthis._expect = this._parent === \"object\" ? \"objectStop\" : \"arrayStop\";\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tthis._expect = \"done\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t// wait for more input\n\t\t\t\t\tbreak main;\n\t\t\t\t}\n\t\t\t\tvalue = match[0];\n\t\t\t\tif(value === \".\"){\n\t\t\t\t\tthis.push({id: value, value: value});\n\t\t\t\t\tthis._expect = \"numberFracStart\";\n\t\t\t\t}else{\n\t\t\t\t\tthis.push({id: \"exponent\", value: value});\n\t\t\t\t\tthis._expect = \"numberExpSign\";\n\t\t\t\t}\n\t\t\t\tthis._buffer = this._buffer.substring(value.length);\n\t\t\t\tbreak;\n\t\t\tcase \"numberFracStart\": // [0-9]\n\t\t\t\tmatch = numberFracStart.exec(this._buffer);\n\t\t\t\tif(!match){\n\t\t\t\t\tif(this._buffer || this._done){\n\t\t\t\t\t\treturn callback(new Error(\"Parser cannot parse input: expected a fractional part of a number\"));\n\t\t\t\t\t}\n\t\t\t\t\t// wait for more input\n\t\t\t\t\tbreak main;\n\t\t\t\t}\n\t\t\t\tvalue = match[0];\n\t\t\t\tthis.push({id: \"numericChunk\", value: value});\n\t\t\t\tthis._expect = \"numberFracDigit\";\n\t\t\t\tthis._buffer = this._buffer.substring(value.length);\n\t\t\t\tbreak;\n\t\t\tcase \"numberFracDigit\": // [0-9]*\n\t\t\t\tmatch = numberFracDigit.exec(this._buffer);\n\t\t\t\tvalue = match[0];\n\t\t\t\tif(value){\n\t\t\t\t\tthis.push({id: \"numericChunk\", value: value});\n\t\t\t\t\tthis._buffer = this._buffer.substring(value.length);\n\t\t\t\t}else{\n\t\t\t\t\tif(this._buffer){\n\t\t\t\t\t\tthis._expect = \"numberExponent\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif(this._done){\n\t\t\t\t\t\tif(this._parent){\n\t\t\t\t\t\t\tthis._expect = this._parent === \"object\" ? \"objectStop\" : \"arrayStop\";\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tthis._expect = \"done\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t// wait for more input\n\t\t\t\t\tbreak main;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"numberExponent\": // [eE]?\n\t\t\t\tmatch = numberExponent.exec(this._buffer);\n\t\t\t\tif(!match){\n\t\t\t\t\tif(this._buffer){\n\t\t\t\t\t\tif(this._parent){\n\t\t\t\t\t\t\tthis._expect = this._parent === \"object\" ? \"objectStop\" : \"arrayStop\";\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tthis._expect = \"done\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif(this._done){\n\t\t\t\t\t\tthis._expect = \"done\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t// wait for more input\n\t\t\t\t\tbreak main;\n\t\t\t\t}\n\t\t\t\tvalue = match[0];\n\t\t\t\tthis.push({id: \"exponent\", value: value});\n\t\t\t\tthis._expect = \"numberExpSign\";\n\t\t\t\tthis._buffer = this._buffer.substring(value.length);\n\t\t\t\tbreak;\n\t\t\tcase \"numberExpSign\": // [-+]?\n\t\t\t\tmatch = numberExpSign.exec(this._buffer);\n\t\t\t\tif(!match){\n\t\t\t\t\tif(this._buffer){\n\t\t\t\t\t\tthis._expect = \"numberExpStart\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif(this._done){\n\t\t\t\t\t\treturn callback(new Error(\"Parser has expected an exponent value of a number\"));\n\t\t\t\t\t}\n\t\t\t\t\t// wait for more input\n\t\t\t\t\tbreak main;\n\t\t\t\t}\n\t\t\t\tvalue = match[0];\n\t\t\t\tthis.push({id: value, value: value});\n\t\t\t\tthis._expect = \"numberExpStart\";\n\t\t\t\tthis._buffer = this._buffer.substring(value.length);\n\t\t\t\tbreak;\n\t\t\tcase \"numberExpStart\": // [0-9]\n\t\t\t\tmatch = numberExpStart.exec(this._buffer);\n\t\t\t\tif(!match){\n\t\t\t\t\tif(this._buffer || this._done){\n\t\t\t\t\t\treturn callback(new Error(\"Parser cannot parse input: expected an exponent part of a number\"));\n\t\t\t\t\t}\n\t\t\t\t\t// wait for more input\n\t\t\t\t\tbreak main;\n\t\t\t\t}\n\t\t\t\tvalue = match[0];\n\t\t\t\tthis.push({id: \"numericChunk\", value: value});\n\t\t\t\tthis._expect = \"numberExpDigit\";\n\t\t\t\tthis._buffer = this._buffer.substring(value.length);\n\t\t\t\tbreak;\n\t\t\tcase \"numberExpDigit\": // [0-9]*\n\t\t\t\tmatch = numberExpDigit.exec(this._buffer);\n\t\t\t\tvalue = match[0];\n\t\t\t\tif(value){\n\t\t\t\t\tthis.push({id: \"numericChunk\", value: value});\n\t\t\t\t\tthis._buffer = this._buffer.substring(value.length);\n\t\t\t\t}else{\n\t\t\t\t\tif(this._buffer || this._done){\n\t\t\t\t\t\tif(this._parent){\n\t\t\t\t\t\t\tthis._expect = this._parent === \"object\" ? \"objectStop\" : \"arrayStop\";\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tthis._expect = \"done\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t// wait for more input\n\t\t\t\t\tbreak main;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"done\":\n\t\t\t\tmatch = ws.exec(this._buffer);\n\t\t\t\tif(!match){\n\t\t\t\t\tif(this._buffer){\n\t\t\t\t\t\treturn callback(new Error(\"Parser cannot parse input: unexpected characters\"));\n\t\t\t\t\t}\n\t\t\t\t\t// wait for more input\n\t\t\t\t\tbreak main;\n\t\t\t\t}\n\t\t\t\tthis._buffer = this._buffer.substring(match[0].length);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\tcallback();\n}\n\nmodule.exports = Parser;\n","/home/travis/build/npmtest/node-npmtest-stream-json/node_modules/stream-json/Streamer.js":"\"use strict\";\n\n\nvar util = require(\"util\");\nvar Transform = require(\"stream\").Transform;\n\n\n// utilities\n\n// long hexadecimal codes: \\uXXXX\nfunction fromHex(s){\n\treturn String.fromCharCode(parseInt(s.slice(2), 16));\n}\n\n// short codes: \\b \\f \\n \\r \\t \\\" \\\\ \\/\nvar codes = {b: \"\\b\", f: \"\\f\", n: \"\\n\", r: \"\\r\", t: \"\\t\", '\"': '\"', \"\\\\\": \"\\\\\", \"/\": \"/\"};\n\n\n// Streamer\n\nfunction Streamer(options){\n\tTransform.call(this, options);\n\tthis._writableState.objectMode = true;\n\tthis._readableState.objectMode = true;\n\n\tthis._stack = [];\n\tthis._state = \"\";\n\tthis._counter = 0;\n}\nutil.inherits(Streamer, Transform);\n\nStreamer.prototype._transform = function transform(chunk, encoding, callback){\n\tswitch(chunk.id){\n\t\tcase \"{\": // object starts\n\t\t\tthis.push({name: \"startObject\"});\n\t\t\tthis._pushState(\"object\");\n\t\t\tbreak;\n\t\tcase \"}\": // object ends\n\t\t\tif(this._state === \"number\"){\n\t\t\t\tthis.push({name: \"endNumber\"});\n\t\t\t\tthis._popState();\n\t\t\t}\n\t\t\tthis.push({name: \"endObject\"});\n\t\t\tthis._popState();\n\t\t\tbreak;\n\t\tcase \"[\": // array starts\n\t\t\tthis.push({name: \"startArray\"});\n\t\t\tthis._pushState(\"array\");\n\t\t\tbreak;\n\t\tcase \"]\": // array ends\n\t\t\tif(this._state === \"number\"){\n\t\t\t\tthis.push({name: \"endNumber\"});\n\t\t\t\tthis._popState();\n\t\t\t}\n\t\t\tthis.push({name: \"endArray\"});\n\t\t\tthis._popState();\n\t\t\tbreak;\n\t\tcase \"\\\"\": // string starts/ends\n\t\t\tif(this._state === \"string\"){\n\t\t\t\tthis._popState();\n\t\t\t\tthis.push({name: this._state === \"object\" &&\n\t\t\t\t\tthis._counter % 2 ? \"endKey\" : \"endString\"});\n\t\t\t}else{\n\t\t\t\tthis.push({name: this._state === \"object\" &&\n\t\t\t\t\t!(this._counter % 2) ? \"startKey\" : \"startString\"});\n\t\t\t\tthis._pushState(\"string\");\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"null\": // null\n\t\t\tthis.push({name: \"nullValue\", value: null});\n\t\t\t++this._counter;\n\t\t\tbreak;\n\t\tcase \"true\": // true\n\t\t\tthis.push({name: \"trueValue\", value: true});\n\t\t\t++this._counter;\n\t\t\tbreak;\n\t\tcase \"false\": // false\n\t\t\tthis.push({name: \"falseValue\", value: false});\n\t\t\t++this._counter;\n\t\t\tbreak;\n\t\tcase \"0\": // number and its fragments\n\t\tcase \"+\":\n\t\tcase \"-\":\n\t\tcase \".\":\n\t\tcase \"nonZero\":\n\t\tcase \"numericChunk\":\n\t\tcase \"exponent\":\n\t\t\tif(this._state !== \"number\"){\n\t\t\t\tthis.push({name: \"startNumber\"});\n\t\t\t\tthis._pushState(\"number\");\n\t\t\t}\n\t\t\tthis.push({name: \"numberChunk\", value: chunk.value});\n\t\t\tbreak;\n\t\tcase \"plainChunk\": // string fragments\n\t\t\tthis.push({name: \"stringChunk\", value: chunk.value});\n\t\t\tbreak;\n\t\tcase \"escapedChars\":\n\t\t\tthis.push({name: \"stringChunk\", value:\n\t\t\t\tchunk.value.length == 2 ? codes[chunk.value.charAt(1)] : fromHex(chunk.value)});\n\t\t\tbreak;\n\t\tdefault: // white space, punctuations\n\t\t\tif(this._state === \"number\"){\n\t\t\t\tthis.push({name: \"endNumber\"});\n\t\t\t\tthis._popState();\n\t\t\t}\n\t\t\tbreak;\n\t}\n\tcallback();\n};\n\nStreamer.prototype._flush = function flush(callback){\n\tif(this._state === \"number\"){\n\t\tthis.push({name: \"endNumber\"});\n\t}\n\tcallback();\n};\n\nStreamer.prototype._pushState = function pushState(state){\n\tthis._stack.push({state: this._state, counter: this._counter});\n\tthis._state   = state;\n\tthis._counter = 0;\n};\n\nStreamer.prototype._popState = function popState(){\n\tvar frame     = this._stack.pop();\n\tthis._state   = frame.state;\n\tthis._counter = frame.counter + 1;\n};\n\n\nmodule.exports = Streamer;\n","/home/travis/build/npmtest/node-npmtest-stream-json/node_modules/stream-json/utils/Assembler.js":"\"use strict\";\n\n\nfunction Assembler(){\n\tthis.stack = [];\n\tthis.current = this.key = null;\n}\n\nAssembler.prototype = {\n\tstartArray:  startObject(Array),\n\tendArray:    endObject,\n\n\tstartObject: startObject(Object),\n\tendObject:   endObject,\n\n\tkeyValue:    function keyValue(value){ this.key = value; },\n\n\t//stringValue: stringValue, // aliased below as _saveValue\n\tnumberValue: function(value){ this._saveValue(parseFloat(value)); },\n\tnullValue:   function(){ this._saveValue(null); },\n\ttrueValue:   function(){ this._saveValue(true); },\n\tfalseValue:  function(){ this._saveValue(false); },\n\n\t_saveValue: function(value){\n\t\tif(this.current){\n\t\t\tif(this.current instanceof Array){\n\t\t\t\tthis.current.push(value);\n\t\t\t}else{\n\t\t\t\tthis.current[this.key] = value;\n\t\t\t\tthis.key = null;\n\t\t\t}\n\t\t}else{\n\t\t\tthis.current = value;\n\t\t}\n\t}\n};\nAssembler.prototype.stringValue = Assembler.prototype._saveValue;\n\nfunction startObject(Ctr){\n\treturn function(){\n\t\tif(this.current){\n\t\t\tthis.stack.push(this.current, this.key);\n\t\t}\n\t\tthis.current = new Ctr();\n\t\tthis.key = null;\n\t}\n}\n\nfunction endObject(){\n\tif(this.stack.length){\n\t\tvar value = this.current;\n\t\tthis.key = this.stack.pop();\n\t\tthis.current = this.stack.pop();\n\t\tthis._saveValue(value);\n\t}\n}\n\nmodule.exports = Assembler;\n","/home/travis/build/npmtest/node-npmtest-stream-json/node_modules/stream-json/utils/FilterObjects.js":"\"use strict\";\n\n\nvar util = require(\"util\");\nvar Transform = require(\"stream\").Transform;\n\n\nfunction defaultItemFilter () { return true; }\n\n\nfunction FilterObjects(options){\n\tTransform.call(this, options);\n\tthis._writableState.objectMode = true;\n\tthis._readableState.objectMode = true;\n\n\tthis.itemFilter = options && options.itemFilter;\n\tif(typeof this.itemFilter != \"function\"){\n\t\tthis.itemFilter = defaultItemFilter;\n\t}\n}\nutil.inherits(FilterObjects, Transform);\n\nFilterObjects.prototype.setFilter = function setFilter(newItemFilter){\n\tif(typeof newItemFilter != \"function\"){\n\t\tnewItemFilter = defaultItemFilter;\n\t}\n\tthis.itemFilter = newItemFilter;\n};\n\nFilterObjects.prototype._transform = function transform(chunk, encoding, callback){\n\tif(this.itemFilter(chunk)){\n\t\tthis.push(chunk);\n\t}\n\tcallback();\n};\n\n\nmodule.exports = FilterObjects;\n","/home/travis/build/npmtest/node-npmtest-stream-json/node_modules/stream-json/utils/StreamArray.js":"\"use strict\";\n\n\nvar util = require(\"util\");\nvar Transform = require(\"stream\").Transform;\n\nvar Assembler = require(\"./Assembler\");\n\nvar Combo = require(\"../Combo\");\n\n\nfunction StreamArray(options){\n\tTransform.call(this, options);\n\tthis._writableState.objectMode = true;\n\tthis._readableState.objectMode = true;\n\n\tthis._assembler = null;\n\tthis._counter = 0;\n}\nutil.inherits(StreamArray, Transform);\n\nStreamArray.prototype._transform = function transform(chunk, encoding, callback){\n\tif(!this._assembler){\n\t\t// first chunk should open an array\n\t\tif(chunk.name !== \"startArray\"){\n\t\t\tcallback(new Error(\"Top-level object should be an array.\"));\n\t\t\treturn;\n\t\t}\n\t\tthis._assembler = new Assembler();\n\t}\n\n\tthis._assembler[chunk.name] && this._assembler[chunk.name](chunk.value);\n\n\tif(!this._assembler.stack.length && this._assembler.current.length){\n\t\tthis.push({index: this._counter++, value: this._assembler.current.pop()});\n\t}\n\n\tcallback();\n};\n\nStreamArray.make = function make(options){\n\tvar o = options ? Object.create(options) : {};\n\to.packKeys = o.packStrings = o.packNumbers = true;\n\n\tvar streams = [new Combo(o), new StreamArray(options)];\n\n\t// connect pipes\n\tvar input = streams[0], output = input;\n\tstreams.forEach(function(stream, index){\n\t\tif(index){\n\t\t\toutput = output.pipe(stream);\n\t\t}\n\t});\n\n\treturn {streams: streams, input: input, output: output};\n};\n\nmodule.exports = StreamArray;\n","/home/travis/build/npmtest/node-npmtest-stream-json/node_modules/stream-json/utils/StreamFilteredArray.js":"\"use strict\";\n\n\nvar util = require(\"util\");\nvar Transform = require(\"stream\").Transform;\n\nvar Assembler = require(\"./Assembler\");\n\nvar Combo = require(\"../Combo\");\n\n\nfunction defaultObjectFilter () { return true; }\n\n\nfunction StreamFilteredArray(options){\n\tTransform.call(this, options);\n\tthis._writableState.objectMode = true;\n\tthis._readableState.objectMode = true;\n\n\tthis.objectFilter = options && options.objectFilter;\n\tif(typeof this.objectFilter != \"function\"){\n\t\tthis.objectFilter = defaultObjectFilter;\n\t}\n\n\tthis._processChunk = this._doCheck;\n\tthis._subObjectCounter = 0;\n\n\tthis._assembler = null;\n\tthis._counter = 0;\n}\nutil.inherits(StreamFilteredArray, Transform);\n\nStreamFilteredArray.prototype._transform = function transform(chunk, encoding, callback){\n\tif(this._assembler){\n\t\tthis._processChunk(chunk);\n\t}else{\n\t\t// first chunk should open an array\n\t\tif(chunk.name !== \"startArray\"){\n\t\t\tcallback(new Error(\"Top-level object should be an array.\"));\n\t\t\treturn;\n\t\t}\n\t\tthis._assembler = new Assembler();\n\t\tthis._assembler[chunk.name] && this._assembler[chunk.name](chunk.value);\n\t}\n\tcallback();\n};\n\nStreamFilteredArray.prototype._doCheck = function doCheck(chunk){\n\tif(!this._assembler[chunk.name]){\n\t\treturn;\n\t}\n\n\tthis._assembler[chunk.name](chunk.value);\n\n\tif(!this._assembler.stack.length){\n\t\tif(this._assembler.current.length){\n\t\t\tthis.push({index: this._counter++, value: this._assembler.current.pop()});\n\t\t}\n\t\treturn;\n\t}\n\n\tif(this._assembler.key === null && this._assembler.stack.length){\n\t\tvar result = this.objectFilter(this._assembler);\n\t\tif(result){\n\t\t\tthis._processChunk = this._skipCheck;\n\t\t}else if(result === false){\n\t\t\tthis._processChunk = this._skipObject;\n\t\t}\n\t}\n};\n\nStreamFilteredArray.prototype._skipCheck = function skipCheck(chunk){\n\tif(!this._assembler[chunk.name]){\n\t\treturn;\n\t}\n\n\tthis._assembler[chunk.name](chunk.value);\n\n\tif(!this._assembler.stack.length && this._assembler.current.length){\n\t\tthis.push({index: this._counter++, value: this._assembler.current.pop()});\n\t\tthis._processChunk = this._doCheck;\n\t}\n};\n\nStreamFilteredArray.prototype._skipObject = function skipObject(chunk){\n\tswitch(chunk.name){\n\t\tcase \"startArray\":\n\t\tcase \"startObject\":\n\t\t\t++this._subObjectCounter;\n\t\t\treturn;\n\t\tcase \"endArray\":\n\t\tcase \"endObject\":\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn;\n\t}\n\tif(this._subObjectCounter){\n\t\t--this._subObjectCounter;\n\t\treturn;\n\t}\n\n\tthis._assembler[chunk.name] && this._assembler[chunk.name](chunk.value);\n\n\tif(!this._assembler.stack.length && this._assembler.current.length){\n\t\t++this._counter;\n\t\tthis._assembler.current.pop();\n\t\tthis._processChunk = this._doCheck;\n\t}\n};\n\nStreamFilteredArray.make = function make(options){\n\tvar o = options ? Object.create(options) : {};\n\to.packKeys = o.packStrings = o.packNumbers = true;\n\n\tvar streams = [new Combo(o), new StreamFilteredArray(options)];\n\n\t// connect pipes\n\tvar input = streams[0], output = input;\n\tstreams.forEach(function(stream, index){\n\t\tif(index){\n\t\t\toutput = output.pipe(stream);\n\t\t}\n\t});\n\n\treturn {streams: streams, input: input, output: output};\n};\n\nmodule.exports = StreamFilteredArray;\n","/home/travis/build/npmtest/node-npmtest-stream-json/node_modules/stream-json/utils/StreamObject.js":"\"use strict\";\n\nvar util = require(\"util\");\nvar Transform = require(\"stream\").Transform;\n\nvar Assembler = require(\"./Assembler\");\n\nvar Combo = require(\"../Combo\");\n\n\nfunction StreamObject(options){\n\tTransform.call(this, options);\n\tthis._writableState.objectMode = true;\n\tthis._readableState.objectMode = true;\n\n\tthis._assembler = null;\n\tthis._lastKey = null;\n}\nutil.inherits(StreamObject, Transform);\n\nStreamObject.prototype._transform = function transform(chunk, encoding, callback){\n\tif(!this._assembler){\n\t\t// first chunk should open an object\n\t\tif(chunk.name !== \"startObject\"){\n\t\t\tcallback(new Error(\"Top-level construct should be an object.\"));\n\t\t\treturn;\n\t\t}\n\t\tthis._assembler = new Assembler();\n\t}\n\n\tthis._assembler[chunk.name] && this._assembler[chunk.name](chunk.value);\n\n\tif(!this._assembler.stack.length){\n\t\tif(this._assembler.key === null){\n\t\t\tif(this._lastKey !== null){\n\t\t\t\tthis.push({key: this._lastKey, value: this._assembler.current[this._lastKey]});\n\t\t\t\tdelete this._assembler.current[this._lastKey];\n\t\t\t\tthis._lastKey = null;\n\t\t\t}\n\t\t}else{\n\t\t\tthis._lastKey = this._assembler.key;\n\t\t}\n\t}\n\n\tcallback();\n};\n\nStreamObject.make = function make(options){\n\tvar o = options ? Object.create(options) : {};\n\to.packKeys = o.packStrings = o.packNumbers = true;\n\n\tvar streams = [new Combo(o), new StreamObject(options)];\n\n\t// connect pipes\n\tvar input = streams[0], output = input;\n\tstreams.forEach(function(stream, index){\n\t\tif(index){\n\t\t\toutput = output.pipe(stream);\n\t\t}\n\t});\n\n\treturn {streams: streams, input: input, output: output};\n};\n\nmodule.exports = StreamObject;\n"}